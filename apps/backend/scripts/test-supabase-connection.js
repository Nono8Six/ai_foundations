// scripts/test-supabase-connection.js

import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'

config()

const REQUIRED_VARS = [
  'SUPABASE_URL',
  'SUPABASE_ANON_KEY',
  'SUPABASE_SERVICE_ROLE_KEY'
]

async function testSupabaseConnection() {
  console.log('üîç Test de connexion Supabase Cloud...\n')

  // V√©rifier les variables d'environnement
  const missing = REQUIRED_VARS.filter(key => !process.env[key])
  if (missing.length > 0) {
    console.error(`‚ùå Variables manquantes: ${missing.join(', ')}`)
    process.exit(1)
  }

  // Cr√©er les clients
  const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_ANON_KEY
  )

  const supabaseAdmin = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_ROLE_KEY
  )

  try {
    // Test 1: Connexion basique
    console.log('1Ô∏è‚É£ Test connexion basique...')
    const { data, error } = await supabase
      .from('_test_connection')
      .select('*')
      .limit(1)

    if (error && error.code !== 'PGRST116') { // PGRST116 = table doesn't exist (OK)
      throw error
    }
    console.log('‚úÖ Connexion basique OK')

    // Test 2: Connexion admin
    console.log('2Ô∏è‚É£ Test connexion admin...')
    const { data: adminData, error: adminError } = await supabaseAdmin
      .from('_test_connection')
      .select('*')
      .limit(1)

    if (adminError && adminError.code !== 'PGRST116') {
      throw adminError
    }
    console.log('‚úÖ Connexion admin OK')

    // Test 3: M√©tadonn√©es du projet
    console.log('3Ô∏è‚É£ Test m√©tadonn√©es...')
    const { data: metadata, error: metaError } = await supabaseAdmin
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .limit(5)

    if (metaError) {
      console.warn('‚ö†Ô∏è  M√©tadonn√©es partielles:', metaError.message)
    } else {
      console.log('‚úÖ M√©tadonn√©es OK')
      console.log(`   Tables trouv√©es: ${metadata?.length || 0}`)
    }

    // Test 4: Auth (si configur√©)
    console.log('4Ô∏è‚É£ Test Auth...')
    const { data: authData, error: authError } = await supabase.auth.getSession()
    if (authError) {
      console.warn('‚ö†Ô∏è  Auth non configur√©:', authError.message)
    } else {
      console.log('‚úÖ Auth OK')
    }

    console.log('\nüéâ Tous les tests pass√©s!')
    console.log('üí° Votre configuration Supabase est op√©rationnelle')
    
    // Informations utiles
    console.log('\nüìä Informations de connexion:')
    console.log(`   URL: ${process.env.SUPABASE_URL}`)
    console.log(`   Projet: ${process.env.SUPABASE_PROJECT_REF || 'Non d√©fini'}`)
    console.log(`   Environnement: ${process.env.NODE_ENV || 'development'}`)

  } catch (error) {
    console.error('\n‚ùå Erreur de connexion:', error.message)
    console.error('üîß V√©rifiez:')
    console.error('   - Vos cl√©s API Supabase')
    console.error('   - L\'URL de votre projet')
    console.error('   - L\'√©tat de votre projet sur supabase.com')
    process.exit(1)
  }
}

// Ex√©cution
testSupabaseConnection().catch(console.error)