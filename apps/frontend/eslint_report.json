[{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\Routes.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\components\\AdminLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\components\\AdminRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\components\\AppIcon.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\components\\AppImage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\components\\Avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\components\\ErrorBoundary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\components\\Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\components\\ProtectedRoute.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\components\\RootLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\components\\ScrollToTop.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\components\\ui\\Button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\components\\ui\\Card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\components\\ui\\Spinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\components\\ui\\TextInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\context\\AdminCourseContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\context\\AuthContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'refreshData' is assigned a value but never used.","line":221,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":221,"endColumn":36},{"ruleId":"no-promise-executor-return","severity":2,"message":"Return values from promise executor functions cannot be read.","line":236,"column":36,"nodeType":"CallExpression","messageId":"returnsValue","endLine":236,"endColumn":60,"suggestions":[{"messageId":"wrapBraces","fix":{"range":[8153,8177],"text":"{setTimeout(resolve, 100)}"},"desc":"Wrap the expression in `{}`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/context/AuthContext.tsx\nimport { useState, useEffect, useCallback, type ReactNode } from 'react';\nimport type {\n  Session,\n  User,\n  SupabaseClient,\n  AuthError,\n  AuthChangeEvent,\n} from '@supabase/supabase-js';\nimport type { Database } from '@frontend/types/database.types';\nimport type { UserProfile } from '@frontend/types/user';\n\nimport { supabase, startTokenMonitoring, stopTokenMonitoring } from '@frontend/lib/supabase';\nimport { safeQuery } from '@frontend/utils/supabaseClient';\nimport { useNavigate } from 'react-router-dom';\nimport { log } from '@libs/logger';\nimport type { AuthErrorWithCode, AuthErrorCode } from '@frontend/types/auth';\nimport { toast } from 'sonner';\nimport { createContextStrict } from './createContextStrict';\nimport { setAuthErrorHandler } from '../lib/supabase-interceptor';\nimport { fetchUserProfile } from '@frontend/services/userService';\n\nconst supabaseClient = supabase as SupabaseClient<Database>;\n\n/**\n * Creates a type-safe AuthErrorWithCode for exactOptionalPropertyTypes\n * Modern TypeScript 5.8+ utility function\n */\nconst createAuthError = (\n  message: string, \n  code?: AuthErrorCode | undefined,\n  originalError?: AuthError | undefined\n): AuthErrorWithCode => {\n  const error = new Error(message) as AuthErrorWithCode;\n  \n  // Explicitly handle undefined for exactOptionalPropertyTypes\n  if (code !== undefined) {\n    error.code = code;\n  }\n  \n  if (originalError !== undefined) {\n    error.originalError = {\n      code: originalError.code\n    };\n  }\n  \n  return error;\n};\n\nexport interface AuthContextValue {\n  signUp: (_args: {\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n  }) => Promise<{ data: { user: User | null; session: Session | null } | null; error: Error | null }>;\n  signIn: (_credentials: { email: string; password: string }) => Promise<{ data: { user: User | null; session: Session | null } | null; error: Error | null }>;\n  signInWithGoogle: () => Promise<{ data: { provider: string; url: string } | null; error: Error | null }>;\n  signOut: () => Promise<void>;\n  logout: () => Promise<void>;\n  resetPassword: (_email: string) => Promise<void>;\n  resendVerificationEmail: (_email: string) => Promise<void>;\n  user: User | null;\n  userProfile: UserProfile | null;\n  session: Session | null;\n  loading: boolean;\n  authError: Error | null;\n  profileError: Error | null;\n  isAdmin: boolean;\n  clearAuthError: () => void;\n  clearProfileError: () => void;\n}\n\nconst [AuthContext, useAuth] = createContextStrict<AuthContextValue>();\n\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [session, setSession] = useState<Session | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);\n  const [authError, setAuthError] = useState<Error | null>(null);\n  const [profileError, setProfileError] = useState<Error | null>(null);\n  const navigate = useNavigate();\n  const clearAuthError = () => setAuthError(null);\n  const clearProfileError = () => setProfileError(null);\n\n  // Sign Out\n  const signOut = useCallback(async (): Promise<void> => {\n    log.debug('­ƒÜ¬ Signing out user...');\n    setLoading(true);\n\n    try {\n      // Arr├¬ter le monitoring des tokens avant de se d├®connecter\n      stopTokenMonitoring();\n      \n      await supabaseClient.auth.signOut();\n      setUser(null);\n      setSession(null);\n      setUserProfile(null);\n      setAuthError(null);\n      setProfileError(null);\n      log.debug('Ô£à User signed out successfully');\n      navigate('/login');\n    } catch (error) {\n      const err = typeof error === 'string' ? new Error(error) : (error as Error);\n      log.error('ÔØî Error signing out:', err);\n      setAuthError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  }, [navigate]);\n\n  // Set up automatic sign out handler for authentication errors\n  useEffect(() => {\n    const handleAuthError = async () => {\n      log.warn('­ƒöÉ Authentication error detected, signing out user...');\n      await signOut();\n    };\n    \n    setAuthErrorHandler(handleAuthError);\n  }, [signOut]);\n\n  useEffect(() => {\n    const error = authError ?? profileError;\n    if (error) {\n      toast.error(error.message);\n    }\n  }, [authError, profileError]);\n\n  useEffect(() => {\n    // Get session on initial load\n    const getInitialSession = async () => {\n      try {\n        log.debug('­ƒöì Getting initial session...');\n        const { data, error } = await safeQuery<{ session: Session | null }, AuthError>(() =>\n          supabaseClient.auth.getSession()\n        );\n        if (error) throw error;\n        const { session } = data ?? {};\n        log.debug('­ƒôï Initial session:', session);\n        setSession(session ?? null);\n        setUser(session?.user ?? null);\n        \n        // Si une session existe, d├®marrer le monitoring des tokens\n        if (session?.user) {\n          log.debug('­ƒöì Starting token monitoring for existing session');\n          startTokenMonitoring();\n        }\n      } catch (err) {\n        const error = typeof err === 'string' ? new Error(err) : (err as Error);\n        log.error('ÔØî Error getting initial session:', error.message);\n        setAuthError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    getInitialSession();\n\n    // Set up auth subscription\n    const {\n      data: { subscription },\n    } = supabaseClient.auth.onAuthStateChange(\n      (event: AuthChangeEvent, session: Session | null) => {\n        log.debug('­ƒöä Auth state change event:', event);\n        log.debug('­ƒôï Auth state change session:', session);\n        log.debug('ÔÅ░ Timestamp:', new Date().toISOString());\n\n        setSession(session);\n        setUser(session?.user ?? null);\n        setLoading(false);\n\n        if (event === 'SIGNED_IN' && session?.user) {\n          log.debug('Ô£à User signed in');\n          // D├®marrer le monitoring des tokens\n          startTokenMonitoring();\n          if (window.location.pathname === '/verify-email') {\n            navigate('/espace');\n          }\n        } else if (event === 'SIGNED_OUT') {\n          log.debug('­ƒÜ¬ User signed out, clearing profile...');\n          setUserProfile(null);\n          // Arr├¬ter le monitoring des tokens\n          stopTokenMonitoring();\n        } else if (event === 'TOKEN_REFRESHED') {\n          log.debug('­ƒöä Token refreshed');\n        } else if (event === 'USER_UPDATED') {\n          log.debug('­ƒæñ User updated');\n          if (window.location.pathname === '/verify-email') {\n            navigate('/espace');\n          }\n        }\n      }\n    );\n\n    return () => {\n      log.debug('­ƒº╣ Cleaning up auth subscription...');\n      subscription.unsubscribe();\n    };\n  }, [navigate]);\n\n\n\n\n\n  useEffect(() => {\n    if (!user || !session) return;\n    \n    const loadProfile = async () => {\n      log.debug('­ƒæñ User detected with valid session, fetching profile...');\n      log.debug('­ƒôï User ID:', user.id);\n      log.debug('­ƒôï Session access token exists:', !!session.access_token);\n      log.debug('­ƒôï Session expires at:', session.expires_at ? new Date(session.expires_at * 1000).toISOString() : 'never');\n      \n      // V├®rifier si la session n'est pas expir├®e\n      const now = Math.floor(Date.now() / 1000);\n      if (session.expires_at && session.expires_at < now) {\n        log.warn('ÔÜá´©Å Session is expired, attempting refresh...');\n        try {\n          const { data: refreshData, error: refreshError } = await supabaseClient.auth.refreshSession();\n          if (refreshError) {\n            log.error('ÔØî Session refresh failed:', refreshError);\n            setProfileError(new Error('Session expired - please sign in again'));\n            return;\n          }\n          log.debug('Ô£à Session refreshed successfully');\n        } catch (refreshErr) {\n          log.error('ÔØî Session refresh attempt failed:', refreshErr);\n          setProfileError(new Error('Session expired - please sign in again'));\n          return;\n        }\n      }\n      \n      // Ajouter un d├®lai pour permettre au token d'├¬tre compl├¿tement ├®tabli\n      await new Promise(resolve => setTimeout(resolve, 100));\n      \n      try {\n        const profile = await fetchUserProfile(user);\n        setUserProfile(profile);\n        setProfileError(null); // Clear any previous errors\n        log.debug('Ô£à User profile loaded successfully:', profile);\n      } catch (err) {\n        const error = typeof err === 'string' ? new Error(err) : (err as Error);\n        log.error('ÔØî Failed to fetch user profile:', error);\n        log.error('ÔØî Error details:', error.message);\n        \n        // Si c'est une erreur d'authentification, forcer la d├®connexion\n        if (error.message.includes('Authentication failed') || error.message.includes('sign in again')) {\n          log.warn('­ƒÜ¬ Authentication error detected, signing out...');\n          await signOut();\n        } else {\n          setProfileError(error);\n        }\n      }\n    };\n    \n    void loadProfile();\n  }, [user, session, signOut]);\n\n  // Sign Up with email\n  const signUp = async ({\n    email,\n    password,\n    firstName,\n    lastName,\n  }: {\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n  }) => {\n    log.debug('­ƒôØ Signing up user:', email);\n    setLoading(true);\n\n    try {\n      const result = await supabaseClient.auth.signUp({\n        email,\n        password,\n        options: {\n          data: {\n            full_name: `${firstName} ${lastName}`,\n          },\n          emailRedirectTo: `${window.location.origin}/verify-email`,\n        },\n      });\n\n      if (result.error) {\n        const authErr = result.error instanceof Error ? result.error : new Error(String(result.error));\n        log.error('Error signing up:', authErr.message);\n        setAuthError(authErr);\n        return { data: null, error: authErr };\n      }\n\n      log.info('Ô£à Sign up successful');\n      return {\n        data: {\n          user: result.data?.user || null,\n          session: result.data?.session || null,\n        },\n        error: null\n      };\n    } catch (error) {\n      const err = typeof error === 'string' ? new Error(error) : (error as Error);\n      log.error('Unexpected error during sign up:', err);\n      setAuthError(err);\n      return { data: null, error: err };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Sign In with email\n  const signIn = async ({\n    email,\n    password,\n  }: {\n    email: string;\n    password: string;\n  }) => {\n    log.debug('­ƒöÉ Signing in user:', email);\n    setLoading(true);\n\n    try {\n      const result = await supabaseClient.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (result.error) {\n        let userFriendlyMessage =\n          'Les identifiants fournis sont incorrects. V├®rifiez votre email et mot de passe.';\n        let errorCode: AuthErrorCode = 'invalid_credentials';\n\n        if (result.error.message.includes('Invalid login credentials')) {\n          userFriendlyMessage = 'Mot de passe incorrect.';\n          errorCode = 'wrong_password';\n        } else if (result.error.message.includes('Email not confirmed')) {\n          userFriendlyMessage =\n            'Veuillez confirmer votre email avant de vous connecter. V├®rifiez votre bo├«te de r├®ception.';\n          errorCode = 'email_not_confirmed';\n        } else if (result.error.message.includes('Too many requests')) {\n          userFriendlyMessage =\n            'Trop de tentatives de connexion. Veuillez patienter quelques minutes avant de r├®essayer.';\n          errorCode = 'too_many_requests';\n        } else if (result.error.message.includes('signup_disabled')) {\n          userFriendlyMessage =\n            \"Les inscriptions sont temporairement d├®sactiv├®es. Contactez l'administrateur.\";\n          errorCode = 'network_error';\n        } else if (result.error.message.includes('email_address_invalid')) {\n          userFriendlyMessage = \"L'adresse email fournie n'est pas valide.\";\n          errorCode = 'invalid_credentials';\n        } else {\n          errorCode = 'unknown_error';\n        }\n\n        // Create type-safe error using utility function\n        const enhancedError = createAuthError(\n          userFriendlyMessage,\n          errorCode,\n          result.error\n        );\n\n        // Error is already properly typed and configured\n\n        log.error('Sign in error:', enhancedError);\n        setAuthError(enhancedError);\n        return { data: null, error: enhancedError };\n      }\n\n      log.info('Ô£à Sign in successful');\n      return {\n        data: {\n          user: result.data?.user || null,\n          session: result.data?.session || null,\n        },\n        error: null\n      };\n    } catch (error) {\n      const err = typeof error === 'string' ? new Error(error) : (error as Error);\n      log.error('Unexpected error during sign in:', err);\n      setAuthError(err);\n      return { data: null, error: err };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Sign In with Google\n  const signInWithGoogle = async () => {\n    log.debug('­ƒöÉ Signing in with Google...');\n    setLoading(true);\n\n    try {\n      const result = await supabaseClient.auth.signInWithOAuth({\n        provider: 'google',\n        options: {\n          redirectTo: `${window.location.origin}/user-dashboard`,\n        },\n      });\n\n      if (result.error) {\n        const authErr = result.error instanceof Error ? result.error : new Error(String(result.error));\n        log.error('Error signing in with Google:', authErr.message);\n        setAuthError(authErr);\n        return { data: null, error: authErr };\n      }\n\n      log.info('Ô£à Google sign in initiated');\n      return {\n        data: result.data\n          ? {\n              provider: result.data.provider,\n              url: result.data.url || `${window.location.origin}/user-dashboard`\n            }\n          : null,\n        error: null\n      };\n    } catch (error) {\n      const err = typeof error === 'string' ? new Error(error) : (error as Error);\n      log.error('Unexpected error during Google sign in:', err);\n      setAuthError(err);\n      return { data: null, error: err };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n\n  // Logout helper used by UI\n  const logout = async (): Promise<void> => {\n    try {\n      log.debug('­ƒÜ¬ Logout initiated...');\n      await signOut();\n      navigate('/login', { replace: true });\n    } catch (err) {\n      log.error('ÔØî Erreur lors de la d├®connexion:', err);\n    } finally {\n      log.debug('­ƒº╣ Cleaning up user state...');\n      setUser(null);\n      setUserProfile(null);\n    }\n  };\n\n\n\n  // Reset password\n  const resetPassword = async (email: string) => {\n    log.debug('­ƒöæ Sending reset password email for:', email);\n    setLoading(true);\n    try {\n      const { error } = await supabaseClient.auth.resetPasswordForEmail(email, {\n        redirectTo: `${window.location.origin}/reset-password`,\n      });\n\n      if (error) {\n        const authErr = error instanceof Error ? error : new Error(String(error));\n        setAuthError(authErr);\n        log.error('Error resetting password:', authErr.message);\n        throw authErr;\n      }\n\n      log.info('Ô£à Password reset email sent');\n    } catch (error) {\n      const err = typeof error === 'string' ? new Error(error) : (error as Error);\n      setAuthError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Resend verification email\n  const resendVerificationEmail = async (email: string) => {\n    log.debug('­ƒôº Resending verification email for:', email);\n    setLoading(true);\n\n    try {\n      const { error } = await supabaseClient.auth.resend({\n        type: 'signup',\n        email,\n      });\n\n      if (error) {\n        const authErr = error instanceof Error ? error : new Error(String(error));\n        setAuthError(authErr);\n        log.error('Error resending verification email:', authErr.message);\n        throw authErr;\n      }\n\n      log.info('Ô£à Verification email resent');\n    } catch (error) {\n      const err = typeof error === 'string' ? new Error(error) : (error as Error);\n      setAuthError(err);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // V├®rifier si l'utilisateur est admin\n  const isAdmin = Boolean(userProfile?.is_admin);\n\n  const value: AuthContextValue = {\n    signUp,\n    signIn,\n    signInWithGoogle,\n    signOut,\n    logout,\n    resetPassword,\n    resendVerificationEmail,\n    user,\n    userProfile,\n    session,\n    loading,\n    authError,\n    profileError,\n    isAdmin,\n    clearAuthError,\n    clearProfileError,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport { useAuth };\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\context\\AuthContextV2.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\context\\CourseContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\context\\ErrorContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\context\\createContextStrict.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\hooks\\useAchievements.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\hooks\\useAuthMasterclass.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'authService' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isUserAdmin' is defined but never used.","line":11,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":36},{"ruleId":"no-duplicate-imports","severity":2,"message":"'@frontend/lib/auth-claims' import is duplicated.","line":15,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":15,"endColumn":61},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'lastUpdate' is assigned a value but never used.","line":69,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":20},{"ruleId":"no-return-await","severity":2,"message":"Redundant use of `await` on a return value.","line":144,"column":14,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":144,"endColumn":54,"suggestions":[{"messageId":"removeAwait","fix":{"range":[4806,4812],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":2,"message":"Redundant use of `await` on a return value.","line":156,"column":14,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":156,"endColumn":63,"suggestions":[{"messageId":"removeAwait","fix":{"range":[5204,5210],"text":""},"desc":"Remove redundant `await`."}]},{"ruleId":"no-return-await","severity":2,"message":"Redundant use of `await` on a return value.","line":181,"column":12,"nodeType":"Identifier","messageId":"redundantUseOfAwait","endLine":181,"endColumn":29,"suggestions":[{"messageId":"removeAwait","fix":{"range":[5779,5785],"text":""},"desc":"Remove redundant `await`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * MASTERCLASS AUTHENTICATION HOOK\n * ================================\n * Hook personnalis├® pour une gestion optimis├®e de l'authentification\n * avec support des claims JWT et pr├®vention des r├®f├®rences circulaires\n */\n\nimport { useCallback, useEffect, useState } from 'react';\nimport { useAuthV2 } from '@frontend/context/AuthContextV2';\nimport { authService } from '@frontend/services/authService';\nimport { getUserClaims, isUserAdmin, withAdminCheck } from '@frontend/lib/auth-claims';\nimport { log } from '@libs/logger';\nimport type { User, Session } from '@supabase/supabase-js';\nimport type { UserProfile } from '@frontend/types/user';\nimport type { AuthClaims } from '@frontend/lib/auth-claims';\n\n/**\n * Interface pour les m├®thodes d'authentification\n */\nexport interface AuthMethods {\n  // Authentification de base\n  signIn: (email: string, password: string) => Promise<boolean>;\n  signUp: (email: string, password: string, firstName: string, lastName: string) => Promise<boolean>;\n  signInWithGoogle: () => Promise<boolean>;\n  signOut: () => Promise<void>;\n  \n  // Gestion des mots de passe\n  resetPassword: (email: string) => Promise<void>;\n  resendVerificationEmail: (email: string) => Promise<void>;\n  \n  // Gestion des profils\n  updateProfile: (updates: Partial<UserProfile>) => Promise<UserProfile>;\n  refreshSession: () => Promise<void>;\n  \n  // Utilitaires\n  clearError: () => void;\n  checkAdminAccess: <T>(operation: () => Promise<T>) => Promise<T>;\n}\n\n/**\n * Interface pour l'├®tat d'authentification\n */\nexport interface AuthState {\n  // ├ëtat principal\n  user: User | null;\n  profile: UserProfile | null;\n  session: Session | null;\n  claims: AuthClaims | null;\n  \n  // ├ëtat de chargement et erreurs\n  loading: boolean;\n  error: Error | null;\n  \n  // Propri├®t├®s d├®riv├®es\n  isAuthenticated: boolean;\n  isAdmin: boolean;\n  \n  // Informations d'utilisateur\n  userEmail: string | null;\n  userName: string | null;\n  userAvatar: string | null;\n}\n\n/**\n * Hook principal d'authentification\n */\nexport const useAuthMasterclass = () => {\n  const authContext = useAuthV2();\n  const [lastUpdate, setLastUpdate] = useState(Date.now());\n\n  // Forcer une mise ├á jour p├®riodique pour s'assurer que l'├®tat est synchronis├®\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setLastUpdate(Date.now());\n    }, 5000); // Mise ├á jour toutes les 5 secondes\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // ├ëtat d'authentification\n  const authState: AuthState = {\n    user: authContext.user,\n    profile: authContext.userProfile,\n    session: authContext.session,\n    claims: authContext.claims,\n    loading: authContext.loading,\n    error: authContext.authError,\n    isAuthenticated: authContext.isAuthenticated,\n    isAdmin: authContext.isAdmin,\n    userEmail: authContext.user?.email || null,\n    userName: authContext.userProfile?.full_name || authContext.user?.user_metadata?.full_name || null,\n    userAvatar: authContext.userProfile?.avatar_url || null,\n  };\n\n  // M├®thodes d'authentification simplifi├®es\n  const authMethods: AuthMethods = {\n    signIn: useCallback(async (email: string, password: string): Promise<boolean> => {\n      try {\n        const result = await authContext.signIn({ email, password });\n        return result.error === null;\n      } catch (error) {\n        log.error('ÔØî Error in useAuthMasterclass.signIn:', error);\n        return false;\n      }\n    }, [authContext]),\n\n    signUp: useCallback(async (email: string, password: string, firstName: string, lastName: string): Promise<boolean> => {\n      try {\n        const result = await authContext.signUp({ email, password, firstName, lastName });\n        return result.error === null;\n      } catch (error) {\n        log.error('ÔØî Error in useAuthMasterclass.signUp:', error);\n        return false;\n      }\n    }, [authContext]),\n\n    signInWithGoogle: useCallback(async (): Promise<boolean> => {\n      try {\n        const result = await authContext.signInWithGoogle();\n        return result.error === null;\n      } catch (error) {\n        log.error('ÔØî Error in useAuthMasterclass.signInWithGoogle:', error);\n        return false;\n      }\n    }, [authContext]),\n\n    signOut: useCallback(async (): Promise<void> => {\n      try {\n        await authContext.signOut();\n      } catch (error) {\n        log.error('ÔØî Error in useAuthMasterclass.signOut:', error);\n      }\n    }, [authContext]),\n\n    resetPassword: useCallback(async (email: string): Promise<void> => {\n      await authContext.resetPassword(email);\n    }, [authContext]),\n\n    resendVerificationEmail: useCallback(async (email: string): Promise<void> => {\n      await authContext.resendVerificationEmail(email);\n    }, [authContext]),\n\n    updateProfile: useCallback(async (updates: Partial<UserProfile>): Promise<UserProfile> => {\n      return await authContext.updateProfile(updates);\n    }, [authContext]),\n\n    refreshSession: useCallback(async (): Promise<void> => {\n      await authContext.refreshSession();\n    }, [authContext]),\n\n    clearError: useCallback((): void => {\n      authContext.clearAuthError();\n    }, [authContext]),\n\n    checkAdminAccess: useCallback(async <T>(operation: () => Promise<T>): Promise<T> => {\n      return await withAdminCheck(authContext.user, operation);\n    }, [authContext.user]),\n  };\n\n  return {\n    ...authState,\n    ...authMethods,\n  };\n};\n\n/**\n * Hook pour v├®rifier les permissions administrateur\n */\nexport const useAdminAccess = () => {\n  const { user, isAdmin, isAuthenticated } = useAuthMasterclass();\n\n  const checkAdminAccess = useCallback(async <T>(operation: () => Promise<T>): Promise<T> => {\n    if (!isAuthenticated) {\n      throw new Error('User not authenticated');\n    }\n\n    if (!isAdmin) {\n      throw new Error('Admin access required');\n    }\n\n    return await operation();\n  }, [isAuthenticated, isAdmin]);\n\n  const requireAdmin = useCallback((redirectTo?: string) => {\n    if (!isAuthenticated) {\n      throw new Error('User not authenticated');\n    }\n\n    if (!isAdmin) {\n      if (redirectTo) {\n        window.location.href = redirectTo;\n      }\n      throw new Error('Admin access required');\n    }\n  }, [isAuthenticated, isAdmin]);\n\n  return {\n    isAdmin,\n    isAuthenticated,\n    user,\n    checkAdminAccess,\n    requireAdmin,\n  };\n};\n\n/**\n * Hook pour la gestion des erreurs d'authentification\n */\nexport const useAuthError = () => {\n  const { error, clearError } = useAuthMasterclass();\n\n  const hasError = Boolean(error);\n  const errorMessage = error?.message || null;\n\n  const isAuthError = useCallback((error: unknown): error is Error => {\n    return error instanceof Error && (\n      error.message.includes('authentication') ||\n      error.message.includes('token') ||\n      error.message.includes('session') ||\n      error.message.includes('unauthorized')\n    );\n  }, []);\n\n  return {\n    hasError,\n    error,\n    errorMessage,\n    clearError,\n    isAuthError,\n  };\n};\n\n/**\n * Hook pour la synchronisation des claims\n */\nexport const useClaimsSync = () => {\n  const { user, claims, refreshSession } = useAuthMasterclass();\n\n  const syncClaims = useCallback(async () => {\n    if (!user) return null;\n\n    try {\n      const freshClaims = await getUserClaims(user);\n      \n      // Si les claims ont chang├®, rafra├«chir la session\n      if (claims && (claims.is_admin !== freshClaims.is_admin || claims.role !== freshClaims.role)) {\n        await refreshSession();\n      }\n      \n      return freshClaims;\n    } catch (error) {\n      log.error('ÔØî Error syncing claims:', error);\n      return null;\n    }\n  }, [user, claims, refreshSession]);\n\n  return {\n    claims,\n    syncClaims,\n  };\n};\n\n/**\n * Hook pour la gestion des sessions\n */\nexport const useSessionManager = () => {\n  const { session, refreshSession, user } = useAuthMasterclass();\n\n  const isSessionValid = useCallback((): boolean => {\n    if (!session) return false;\n\n    const now = Math.floor(Date.now() / 1000);\n    const expiresAt = session.expires_at || 0;\n    \n    return expiresAt > now;\n  }, [session]);\n\n  const getTimeUntilExpiry = useCallback((): number => {\n    if (!session) return 0;\n\n    const now = Math.floor(Date.now() / 1000);\n    const expiresAt = session.expires_at || 0;\n    \n    return Math.max(0, expiresAt - now);\n  }, [session]);\n\n  const ensureValidSession = useCallback(async (): Promise<boolean> => {\n    if (!isSessionValid()) {\n      try {\n        await refreshSession();\n        return true;\n      } catch (error) {\n        log.error('ÔØî Error refreshing session:', error);\n        return false;\n      }\n    }\n    return true;\n  }, [isSessionValid, refreshSession]);\n\n  return {\n    session,\n    user,\n    isSessionValid,\n    getTimeUntilExpiry,\n    ensureValidSession,\n    refreshSession,\n  };\n};","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\hooks\\useProgressChartData.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\hooks\\useRecentActivity.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\hooks\\useRouteProgress.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\hooks\\useSupabaseList.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\lib\\__mocks__\\supabase.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1211,1214],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1211,1214],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1635,1638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1635,1638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3242,3245],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3242,3245],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":7,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":10,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3430,3433],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3430,3433],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// src/lib/__mocks__/supabase.ts\nimport { vi } from 'vitest';\n\n// Define a flexible mock for the Supabase query builder chain\nconst mockQueryBuilder = (\n  resolveData: { data: unknown; error: unknown; count: number | null } = {\n    data: null,\n    error: null,\n    count: null,\n  }\n) => ({\n  select: vi.fn().mockReturnThis(),\n  insert: vi.fn().mockResolvedValue(resolveData), // Assuming insert might be used elsewhere\n  update: vi.fn().mockResolvedValue(resolveData), // Assuming update might be used elsewhere\n  delete: vi.fn().mockResolvedValue(resolveData), // Assuming delete might be used elsewhere\n  eq: vi.fn().mockReturnThis(),\n  neq: vi.fn().mockReturnThis(),\n  gt: vi.fn().mockReturnThis(),\n  gte: vi.fn().mockReturnThis(),\n  lt: vi.fn().mockReturnThis(),\n  lte: vi.fn().mockReturnThis(),\n  in: vi.fn().mockReturnThis(),\n  is: vi.fn().mockReturnThis(),\n  order: vi.fn().mockReturnThis(),\n  limit: vi.fn().mockReturnThis(),\n  range: vi.fn().mockReturnThis(),\n  single: vi.fn().mockResolvedValue(resolveData), // For queries expecting a single row\n  // Mock the promise resolution for general select queries\n  // This allows us to use await supabase.from(...).select(...)\n  then: vi.fn(function (this: any, onFulfilled, onRejected) {\n    // If this.mockResolvedValueOnce has been called, use its value\n    if (this.mockResolvedValue) {\n      return Promise.resolve(this.mockResolvedValue).then(onFulfilled, onRejected);\n    }\n    // Default resolution\n    return Promise.resolve(resolveData).then(onFulfilled, onRejected);\n  }),\n  // Helper to easily set the resolved value for a specific chain\n  mockResolvedValueOnce (this: any, value: unknown) {\n    this.mockResolvedValue = value;\n    return this; // Return this to allow further chaining if needed, though usually it's the end\n  },\n});\n\n// The main Supabase client mock\nexport const supabase = {\n  from: vi.fn(() => mockQueryBuilder()), // Default behavior\n  // Mock rpc if needed\n  // rpc: vi.fn().mockResolvedValue({ data: null, error: null }),\n};\n\n// Helper to reset mocks and set specific resolutions for chained calls\n// This is particularly useful if a single test makes multiple `from` calls\n// or if a component's `useEffect` makes multiple calls.\nsupabase.from.mockImplementation(((tableName: string) => {\n  // Default mock behavior for any table\n  let defaultResponse = { data: [], error: null, count: 0 };\n  if (tableName === 'profiles') {\n    defaultResponse = { data: [], error: null, count: 0 };\n  } else if (tableName === 'activity_log') {\n    defaultResponse = { data: [], error: null, count: 0 };\n  } else if (tableName === 'user_sessions') {\n    defaultResponse = { data: [], error: null, count: 0 };\n  } else if (tableName === 'courses') {\n    defaultResponse = { data: [], error: null, count: 0 };\n  } else if (tableName === 'user_progress') {\n    defaultResponse = { data: [], error: null, count: 0 };\n  }\n  // Return a new query builder mock each time `from` is called\n  // This allows different resolutions for different `from('table')` calls in the same test\n  const newBuilder = mockQueryBuilder(defaultResponse);\n  // Attach a convenience method to the builder itself to set its specific resolution\n  newBuilder.mockResolvedValueOnce = function (this: any, value: unknown) {\n    // Renamed to avoid conflict\n    this.mockResolvedValue = value; // This sets the value on the builder instance\n    return this;\n  };\n  return newBuilder;\n}) as any);\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\lib\\auth-claims.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\lib\\logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\lib\\supabase-interceptor.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\lib\\supabase.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":43,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":43,"endColumn":22,"suggestions":[{"fix":{"range":[1155,1216],"text":""},"messageId":"removeConsole","data":{"propertyName":"debug"},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":53,"column":9,"nodeType":"MemberExpression","messageId":"limited","endLine":53,"endColumn":22,"suggestions":[{"fix":{"range":[1510,1564],"text":""},"messageId":"removeConsole","data":{"propertyName":"debug"},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement. Only these console methods are allowed: warn, error.","line":58,"column":11,"nodeType":"MemberExpression","messageId":"limited","endLine":58,"endColumn":24,"suggestions":[{"fix":{"range":[1774,1823],"text":""},"messageId":"removeConsole","data":{"propertyName":"debug"},"desc":"Remove the console.debug()."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { createClient } from '@supabase/supabase-js';\nimport type { Database } from '@frontend/types/database.types';\nimport { z } from 'zod';\n\nconst envSchema = z.object({\n  VITE_SUPABASE_URL: z.string().url(),\n  VITE_SUPABASE_ANON_KEY: z.string().min(1),\n});\n\nconst { VITE_SUPABASE_URL: supabaseUrl, VITE_SUPABASE_ANON_KEY: supabaseAnonKey } = envSchema.parse(\n  import.meta.env\n);\n\nexport const supabase = createClient<Database>(supabaseUrl, supabaseAnonKey, {\n  auth: {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    flowType: 'pkce',\n  },\n  global: {\n    headers: {\n      'x-client-info': 'ai-foundations-lms',\n    },\n  },\n});\n\n// Surveillance proactive des tokens\nlet tokenCheckInterval: NodeJS.Timeout | null = null;\n\nexport const startTokenMonitoring = () => {\n  // V├®rifier les tokens toutes les 5 minutes\n  tokenCheckInterval = setInterval(async () => {\n    try {\n      const { data: { session }, error } = await supabase.auth.getSession();\n      \n      if (error) {\n        console.warn('­ƒöì Token monitoring detected session error:', error);\n        return;\n      }\n      \n      if (!session) {\n        console.debug('­ƒöì No session found during token monitoring');\n        return;\n      }\n      \n      const now = Math.floor(Date.now() / 1000);\n      const expiresAt = session.expires_at || 0;\n      const timeUntilExpiry = expiresAt - now;\n      \n      // Si le token expire dans moins de 5 minutes, le rafra├«chir\n      if (timeUntilExpiry < 300) {\n        console.debug('­ƒöä Token expires soon, refreshing...');\n        const { error: refreshError } = await supabase.auth.refreshSession();\n        if (refreshError) {\n          console.error('ÔØî Automatic token refresh failed:', refreshError);\n        } else {\n          console.debug('Ô£à Token refreshed automatically');\n        }\n      }\n    } catch (error) {\n      console.error('ÔØî Token monitoring error:', error);\n    }\n  }, 5 * 60 * 1000); // 5 minutes\n};\n\nexport const stopTokenMonitoring = () => {\n  if (tokenCheckInterval) {\n    clearInterval(tokenCheckInterval);\n    tokenCheckInterval = null;\n  }\n};\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\admin-dashboard\\components\\GeographicDistribution.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\admin-dashboard\\components\\PerformanceMetrics.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\admin-dashboard\\components\\PopularCoursesChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\admin-dashboard\\components\\RecentActivity.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\admin-dashboard\\components\\UserEngagementChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\admin-dashboard\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\auth\\ForgotPassword.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\auth\\components\\GoogleAuthButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\auth\\components\\LoginForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\auth\\components\\RegisterForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\auth\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\cms\\components\\BulkOperations.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\cms\\components\\ContentSearch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\cms\\components\\ContentTree.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\cms\\components\\CourseEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\cms\\components\\LessonEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\cms\\components\\MediaLibrary.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\cms\\components\\ModuleEditor.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\cms\\index.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'_discard' is assigned a value but never used.","line":187,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":187,"endColumn":31,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\lesson-viewer\\components\\ActionBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\lesson-viewer\\components\\LessonNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\lesson-viewer\\components\\NoteTaking.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\lesson-viewer\\components\\ProgressBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\lesson-viewer\\components\\TextContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\lesson-viewer\\components\\VideoPlayer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\lesson-viewer\\components\\XPCelebration.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\lesson-viewer\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\not-found\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\program-overview\\components\\CourseCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\program-overview\\components\\CoursePathway.tsx","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":80,"column":48,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":80,"endColumn":75,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[3009,3010],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Icon from '@frontend/components/AppIcon';\nimport Image from '@frontend/components/AppImage';\nimport type { CourseWithProgress, CourseDifficulty } from '@frontend/types/course.types';\n\ntype DifficultyLabel = 'D├®butant' | 'Interm├®diaire' | 'Avanc├®' | 'Autre';\n\nconst difficultyLabelMap: Record<CourseDifficulty, DifficultyLabel> = {\n  beginner: 'D├®butant',\n  intermediate: 'Interm├®diaire',\n  advanced: 'Avanc├®',\n  expert: 'Avanc├®',\n};\n\nconst difficultyColors: Record<CourseDifficulty | DifficultyLabel, string> = {\n  beginner: 'from-success to-success-600',\n  intermediate: 'from-warning to-warning-600',\n  advanced: 'from-error to-error-600',\n  expert: 'from-error to-error-600',\n  D├®butant: 'from-success to-success-600',\n  Interm├®diaire: 'from-warning to-warning-600',\n  Avanc├®: 'from-error to-error-600',\n  Autre: 'from-secondary to-secondary-600',\n};\n\nexport interface CoursePathwayProps {\n  courses: CourseWithProgress[];\n}\n\nconst CoursePathway: React.FC<CoursePathwayProps> = ({ courses }) => {\n  // Group courses by difficulty level for pathway visualization\n  const groupedCourses = courses.reduce(\n    (acc, course) => {\n      const level = difficultyLabelMap[course.difficulty] ?? 'Autre';\n      (acc[level] ??= []).push(course);\n      return acc;\n    },\n    {} as Partial<Record<DifficultyLabel, CourseWithProgress[]>>\n  );\n\n  const difficultyOrder: DifficultyLabel[] = ['D├®butant', 'Interm├®diaire', 'Avanc├®', 'Autre'];\n  const orderedGroups = difficultyOrder.filter(level => groupedCourses[level]);\n\n  const getDifficultyColor = (difficulty?: CourseDifficulty | DifficultyLabel): string =>\n    difficultyColors[difficulty ?? 'Autre'];\n\n  const getProgressColor = (progress?: number): string => {\n    if (progress === 100) return 'bg-success';\n    if ((progress ?? 0) > 0) return 'bg-primary';\n    return 'bg-secondary-200';\n  };\n\n  return (\n    <div className='space-y-12'>\n      {orderedGroups.map((difficulty, groupIndex) => (\n        <div key={difficulty} className='relative'>\n          {/* Difficulty Level Header */}\n          <div className='flex items-center mb-8'>\n            <div\n              className={`w-12 h-12 bg-gradient-to-br ${getDifficultyColor(difficulty)} rounded-full flex items-center justify-center mr-4`}\n            >\n              <Icon\n                aria-hidden='true'\n                name={\n                  difficulty === 'D├®butant'\n                    ? 'Play'\n                    : difficulty === 'Interm├®diaire'\n                      ? 'Zap'\n                      : 'Crown'\n                }\n                size={24}\n                color='white'\n              />\n            </div>\n            <div>\n              <h2 className='text-2xl font-bold text-text-primary'>{difficulty}</h2>\n              <p className='text-text-secondary'>\n                {groupedCourses[difficulty]?.length ?? 0} cours disponible\n                {groupedCourses[difficulty] && groupedCourses[difficulty]!.length > 1 ? 's' : ''}\n              </p>\n            </div>\n          </div>\n\n          {/* Courses in this difficulty level */}\n          <div className='relative'>\n            {/* Connection Line */}\n            {groupIndex < orderedGroups.length - 1 && (\n              <div className='absolute left-6 top-full w-0.5 h-12 bg-gradient-to-b from-border to-transparent z-0' />\n            )}\n\n            <div className='space-y-6'>\n              {groupedCourses[difficulty]?.map((course: CourseWithProgress, courseIndex: number) => {\n                const progress = course.progress?.percentage ?? 0;\n                const isEnrolled = progress > 0;\n                const imageSrc =\n                  course.thumbnail_url || course.cover_image_url || '/assets/images/no_image.png';\n                return (\n                  <div key={course.id} className='relative'>\n                    {/* Course Connection Line */}\n                    {courseIndex < (groupedCourses[difficulty]?.length ?? 0) - 1 && (\n                      <div className='absolute left-6 top-full w-0.5 h-6 bg-border z-0' />\n                    )}\n\n                    {/* Course Card */}\n                    <div className='flex items-start gap-6 bg-surface rounded-xl shadow-subtle hover:shadow-medium transition-all duration-300 p-6 relative z-10'>\n                      {/* Course Number/Status */}\n                      <div className='flex-shrink-0'>\n                        <div\n                          className={`w-12 h-12 rounded-full flex items-center justify-center ${\n                            progress === 100\n                              ? 'bg-success text-white'\n                              : isEnrolled\n                                ? 'bg-primary text-white'\n                                : 'bg-secondary-200 text-text-secondary'\n                          }`}\n                        >\n                          {progress === 100 ? (\n                            <Icon aria-hidden='true' name='Check' size={20} />\n                          ) : isEnrolled ? (\n                            <Icon aria-hidden='true' name='Play' size={20} />\n                          ) : (\n                            <Icon aria-hidden='true' name='Lock' size={20} />\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Course Image */}\n                      <div className='flex-shrink-0 w-24 h-24 rounded-lg overflow-hidden'>\n                        <Image\n                          src={imageSrc}\n                          alt={course.title}\n                          className='w-full h-full object-cover'\n                        />\n                      </div>\n\n                      {/* Course Content */}\n                      <div className='flex-1 min-w-0'>\n                        <div className='flex items-start justify-between mb-3'>\n                          <div>\n                            <h3 className='text-lg font-semibold text-text-primary mb-1'>\n                              {course.title}\n                            </h3>\n                            {course.duration && (\n                              <div className='flex items-center gap-4 text-sm text-text-secondary'>\n                                {course.duration && (\n                                  <div className='flex items-center gap-1'>\n                                    <Icon aria-hidden='true' name='Clock' size={14} />\n                                    <span>{course.duration}</span>\n                                  </div>\n                                )}\n                              </div>\n                            )}\n                          </div>\n\n                          {/* Course Badges */}\n                          <div className='flex gap-2' />\n                        </div>\n\n                        {/* Description */}\n                        <p className='text-text-secondary text-sm mb-4 line-clamp-2'>\n                          {course.description}\n                        </p>\n\n                        {/* Progress Bar (for enrolled courses) */}\n                        {isEnrolled && (\n                          <div className='mb-4'>\n                            <div className='flex items-center justify-between text-sm mb-2'>\n                              <span className='text-text-secondary'>Progression</span>\n                              <span className='font-medium text-text-primary'>{progress}%</span>\n                            </div>\n                            <div className='w-full bg-secondary-200 rounded-full h-2'>\n                              <div\n                                className={`h-2 rounded-full transition-all duration-300 ${getProgressColor(progress)}`}\n                                style={{ width: `${progress}%` }}\n                              />\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Prerequisites */}\n                        {(course.prerequisites?.length ?? 0) > 0 && (\n                          <div className='mb-4'>\n                            <p className='text-xs text-text-secondary mb-2'>Pr├®requis:</p>\n                            <div className='flex flex-wrap gap-1'>\n                              {course.prerequisites?.map((prereq: string, index: number) => (\n                                <span\n                                  key={index}\n                                  className='px-2 py-1 bg-secondary-100 text-secondary-700 text-xs rounded'\n                                >\n                                  {prereq}\n                                </span>\n                              ))}\n                            </div>\n                          </div>\n                        )}\n\n                        {/* Action Buttons */}\n                        <div className='flex items-center gap-3'>\n                          {isEnrolled ? (\n                            <Link\n                              to='/lesson-viewer'\n                              className='px-6 py-2 bg-primary text-white rounded-lg hover:bg-primary-700 transition-colors font-medium text-sm'\n                            >\n                              {progress === 100 ? 'Revoir' : 'Continuer'}\n                            </Link>\n                          ) : (\n                            <Link\n                              to='/lesson-viewer'\n                              className='px-6 py-2 bg-primary text-white rounded-lg hover:bg-primary-700 transition-colors font-medium text-sm'\n                            >\n                              S&apos;inscrire\n                            </Link>\n                          )}\n\n                          {/* Rating */}\n                          {course.average_rating !== undefined && (\n                            <div className='flex items-center gap-1 ml-auto'>\n                              <Icon\n                                aria-hidden='true'\n                                name='Star'\n                                size={14}\n                                className='text-warning fill-current'\n                              />\n                              <span className='text-sm font-medium text-text-primary'>\n                                {course.average_rating.toFixed(1)}\n                              </span>\n                              <span className='text-sm text-text-secondary'>\n                                ({course.enrolled_students || 0})\n                              </span>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      ))}\n\n      {/* Pathway Completion Message */}\n      {courses.length > 0 && (\n        <div className='text-center py-12 bg-gradient-to-r from-primary-50 to-accent-50 rounded-xl'>\n          <Icon aria-hidden='true' name='Trophy' size={48} className='mx-auto text-primary mb-4' />\n          <h3 className='text-xl font-bold text-text-primary mb-2'>\n            Parcours d&apos;Excellence IA\n          </h3>\n          <p className='text-text-secondary max-w-2xl mx-auto'>\n            Suivez ce parcours structur├® pour ma├«triser l&apos;intelligence artificielle de mani├¿re\n            progressive et efficace. Chaque cours vous pr├®pare au suivant.\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default CoursePathway;\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\program-overview\\components\\FilterSidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1232,1235],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1232,1235],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1328,1331],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1328,1331],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5581,5584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5581,5584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":146,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":146,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5664,5667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5664,5667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport Icon from '@frontend/components/AppIcon';\nimport type { CourseWithProgress } from '@frontend/types/course.types';\nimport type { ProgramFilters } from '../index';\n\nexport interface FilterSidebarProps {\n  filters: ProgramFilters;\n  onFilterChange: (filters: ProgramFilters) => void;\n  courses: CourseWithProgress[];\n}\n\nconst FilterSidebar: React.FC<FilterSidebarProps> = ({ filters, onFilterChange, courses }) => {\n  const skillLevels = ['D├®butant', 'Interm├®diaire', 'Avanc├®'];\n  const durations = [\n    { value: 'short', label: 'Court (Ôëñ 3 semaines)' },\n    { value: 'medium', label: 'Moyen (4-6 semaines)' },\n    { value: 'long', label: 'Long (ÔëÑ 7 semaines)' },\n  ];\n  const categories = [...new Set(courses.map(course => course.category))];\n  const statuses = [\n    { value: 'enrolled', label: 'Inscrit' },\n    { value: 'completed', label: 'Termin├®' },\n    { value: 'in-progress', label: 'En cours' },\n    { value: 'not-started', label: 'Non commenc├®' },\n  ];\n\n  const handleFilterToggle = (filterType: keyof ProgramFilters, value: string | ('completed' | 'not_started' | 'in_progress')) => {\n    const currentFilters = filters[filterType];\n    const newFilters = currentFilters.includes(value as any)\n      ? currentFilters.filter(item => item !== value)\n      : [...currentFilters, value as any];\n\n    onFilterChange({\n      ...filters,\n      [filterType]: newFilters,\n    });\n  };\n\n  const clearAllFilters = () => {\n    onFilterChange({\n      skillLevel: [],\n      duration: [],\n      category: [],\n      status: [],\n    });\n  };\n\n  const hasActiveFilters = Object.values(filters).some(filterArray => filterArray.length > 0);\n\n  return (\n    <div className='bg-surface rounded-xl shadow-subtle p-6 sticky top-24'>\n      {/* Header */}\n      <div className='flex items-center justify-between mb-6'>\n        <h3 className='text-lg font-semibold text-text-primary'>Filtres</h3>\n        {hasActiveFilters && (\n          <button\n            onClick={clearAllFilters}\n            className='text-sm text-primary hover:text-primary-700 transition-colors'\n          >\n            Effacer tout\n          </button>\n        )}\n      </div>\n\n      {/* Skill Level Filter */}\n      <div className='mb-6'>\n        <h4 className='text-sm font-medium text-text-primary mb-3 flex items-center gap-2'>\n          <Icon aria-hidden='true' name='TrendingUp' size={16} />\n          Niveau de difficult├®\n        </h4>\n        <div className='space-y-2'>\n          {skillLevels.map(level => (\n            <label key={level} className='flex items-center gap-3 cursor-pointer group'>\n              <input\n                type='checkbox'\n                checked={filters.skillLevel.includes(level)}\n                onChange={() => handleFilterToggle('skillLevel', level)}\n                className='w-4 h-4 text-primary border-border rounded focus:ring-primary focus:ring-2'\n              />\n              <span className='text-sm text-text-secondary group-hover:text-text-primary transition-colors'>\n                {level}\n              </span>\n            </label>\n          ))}\n        </div>\n      </div>\n\n      {/* Duration Filter */}\n      <div className='mb-6'>\n        <h4 className='text-sm font-medium text-text-primary mb-3 flex items-center gap-2'>\n          <Icon aria-hidden='true' name='Clock' size={16} />\n          Dur├®e\n        </h4>\n        <div className='space-y-2'>\n          {durations.map(duration => (\n            <label key={duration.value} className='flex items-center gap-3 cursor-pointer group'>\n              <input\n                type='checkbox'\n                checked={filters.duration.includes(duration.value)}\n                onChange={() => handleFilterToggle('duration', duration.value)}\n                className='w-4 h-4 text-primary border-border rounded focus:ring-primary focus:ring-2'\n              />\n              <span className='text-sm text-text-secondary group-hover:text-text-primary transition-colors'>\n                {duration.label}\n              </span>\n            </label>\n          ))}\n        </div>\n      </div>\n\n      {/* Category Filter */}\n      <div className='mb-6'>\n        <h4 className='text-sm font-medium text-text-primary mb-3 flex items-center gap-2'>\n          <Icon aria-hidden='true' name='FolderOpen' size={16} />\n          Cat├®gorie\n        </h4>\n        <div className='space-y-2'>\n          {categories.map(category => (\n            <label key={category} className='flex items-center gap-3 cursor-pointer group'>\n              <input\n                type='checkbox'\n                checked={filters.category.includes(category ?? '')}\n                onChange={() => handleFilterToggle('category', category ?? '')}\n                className='w-4 h-4 text-primary border-border rounded focus:ring-primary focus:ring-2'\n              />\n              <span className='text-sm text-text-secondary group-hover:text-text-primary transition-colors'>\n                {category}\n              </span>\n            </label>\n          ))}\n        </div>\n      </div>\n\n      {/* Status Filter */}\n      <div className='mb-6'>\n        <h4 className='text-sm font-medium text-text-primary mb-3 flex items-center gap-2'>\n          <Icon aria-hidden='true' name='CheckCircle' size={16} />\n          Statut\n        </h4>\n        <div className='space-y-2'>\n          {statuses.map(status => (\n            <label key={status.value} className='flex items-center gap-3 cursor-pointer group'>\n              <input\n                type='checkbox'\n                checked={filters.status.includes(status.value as any)}\n                onChange={() => handleFilterToggle('status', status.value as any)}\n                className='w-4 h-4 text-primary border-border rounded focus:ring-primary focus:ring-2'\n              />\n              <span className='text-sm text-text-secondary group-hover:text-text-primary transition-colors'>\n                {status.label}\n              </span>\n            </label>\n          ))}\n        </div>\n      </div>\n\n      {/* Quick Stats */}\n      <div className='border-t border-border pt-6'>\n        <h4 className='text-sm font-medium text-text-primary mb-3'>Statistiques</h4>\n        <div className='space-y-2 text-sm text-text-secondary'>\n          <div className='flex justify-between'>\n            <span>Total des cours</span>\n            <span className='font-medium'>{courses.length}</span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FilterSidebar;\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\program-overview\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\public-homepage\\components\\BenefitsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\public-homepage\\components\\CookieNotice.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\public-homepage\\components\\DataVisualization.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":115,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":115,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4303,4306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4303,4306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6191,6194],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6191,6194],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\nimport { colors, theme } from '@frontend/utils/theme';\nimport { motion } from 'framer-motion';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell,\n} from 'recharts';\nimport Icon from '@frontend/components/AppIcon';\n\nconst DataVisualization: React.FC = () => {\n  // Mock data for AI impact across industries\n  const industryImpactData = [\n    { industry: 'Comptabilit├®', productivity: 85, automation: 78, satisfaction: 92 },\n    { industry: 'Commerce', productivity: 78, automation: 82, satisfaction: 88 },\n    { industry: 'Finance', productivity: 90, automation: 85, satisfaction: 94 },\n    { industry: 'Maintenance', productivity: 72, automation: 68, satisfaction: 86 },\n    { industry: 'Marketing', productivity: 88, automation: 90, satisfaction: 91 },\n  ];\n\n  const adoptionTrendData = [\n    { month: 'Jan', users: 1200, completion: 65 },\n    { month: 'F├®v', users: 1800, completion: 72 },\n    { month: 'Mar', users: 2400, completion: 78 },\n    { month: 'Avr', users: 3200, completion: 82 },\n    { month: 'Mai', users: 4100, completion: 85 },\n    { month: 'Jun', users: 5200, completion: 88 },\n  ];\n\n  const skillDistributionData = useMemo(\n    () => [\n      { name: 'D├®butant', value: 45, color: colors['primary-500'] },\n      { name: 'Interm├®diaire', value: 35, color: colors['accent-600'] },\n      { name: 'Avanc├®', value: 20, color: colors['warning-500'] },\n    ],\n    []\n  );\n\n  const containerVariants = {\n    hidden: { opacity: 0 },\n    visible: {\n      opacity: 1,\n      transition: {\n        staggerChildren: 0.2,\n      },\n    },\n  };\n\n  const itemVariants = {\n    hidden: { opacity: 0, y: 30 },\n    visible: { opacity: 1, y: 0 },\n  };\n\n  return (\n    <section className='py-16 lg:py-20 bg-surface'>\n      <div className='max-w-7xl mx-auto px-4 sm:px-6 lg:px-8'>\n        {/* Section Header */}\n        <motion.div\n          initial={{ opacity: 0, y: 30 }}\n          whileInView={{ opacity: 1, y: 0 }}\n          viewport={{ once: true }}\n          transition={{ duration: 0.6 }}\n          className='text-center mb-16'\n        >\n          <div className='inline-flex items-center px-4 py-2 bg-accent-100 text-accent-700 rounded-full text-sm font-medium mb-6'>\n            <Icon aria-hidden='true' name='TrendingUp' size={16} className='mr-2' />\n            Impact mesurable de l&rsquo;IA\n          </div>\n          <h2 className='text-3xl lg:text-4xl font-bold text-text-primary mb-6'>\n            L&rsquo;IA transforme les entreprises\n          </h2>\n          <p className='text-xl text-text-secondary max-w-3xl mx-auto'>\n            D├®couvrez comment l&rsquo;intelligence artificielle r├®volutionne la productivit├® dans\n            diff├®rents secteurs professionnels\n          </p>\n        </motion.div>\n\n        {/* Charts Grid */}\n        <motion.div\n          variants={containerVariants}\n          initial='hidden'\n          whileInView='visible'\n          viewport={{ once: true }}\n          className='grid lg:grid-cols-2 gap-8 mb-16'\n        >\n          {/* Industry Impact Chart */}\n          <motion.div\n            variants={itemVariants}\n            className='bg-surface border border-border rounded-xl p-6 shadow-subtle hover:shadow-medium transition-shadow duration-300'\n          >\n            <div className='flex items-center justify-between mb-6'>\n              <h3 className='text-xl font-semibold text-text-primary'>Impact par secteur</h3>\n              <Icon aria-hidden='true' name='BarChart3' size={24} className='text-primary' />\n            </div>\n            <div className='h-80'>\n              <ResponsiveContainer width='100%' height='100%'>\n                <BarChart data={industryImpactData}>\n                  <CartesianGrid strokeDasharray='3 3' stroke={colors.border} />\n                  <XAxis dataKey='industry' tick={{ fontSize: 12 }} stroke={colors.secondary} />\n                  <YAxis tick={{ fontSize: 12 }} stroke={colors.secondary} />\n                  <Tooltip\n                    contentStyle={{\n                      backgroundColor: colors.surface,\n                      border: `1px solid ${colors.border}`,\n                      borderRadius: '0.5rem',\n                      boxShadow: (theme.boxShadow as any)?.medium ?? '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\n                    }}\n                  />\n                  <Bar\n                    dataKey='productivity'\n                    fill={colors['primary-500']}\n                    name='Productivit├® %'\n                    radius={[4, 4, 0, 0]}\n                  />\n                  <Bar\n                    dataKey='automation'\n                    fill={colors['accent-600']}\n                    name='Automatisation %'\n                    radius={[4, 4, 0, 0]}\n                  />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </motion.div>\n\n          {/* Adoption Trend Chart */}\n          <motion.div\n            variants={itemVariants}\n            className='bg-surface border border-border rounded-xl p-6 shadow-subtle hover:shadow-medium transition-shadow duration-300'\n          >\n            <div className='flex items-center justify-between mb-6'>\n              <h3 className='text-xl font-semibold text-text-primary'>\n                Croissance des utilisateurs\n              </h3>\n              <Icon aria-hidden='true' name='TrendingUp' size={24} className='text-accent' />\n            </div>\n            <div className='h-80'>\n              <ResponsiveContainer width='100%' height='100%'>\n                <LineChart data={adoptionTrendData}>\n                  <CartesianGrid strokeDasharray='3 3' stroke={colors.border} />\n                  <XAxis dataKey='month' tick={{ fontSize: 12 }} stroke={colors.secondary} />\n                  <YAxis tick={{ fontSize: 12 }} stroke={colors.secondary} />\n                  <Tooltip\n                    contentStyle={{\n                      backgroundColor: colors.surface,\n                      border: `1px solid ${colors.border}`,\n                      borderRadius: '0.5rem',\n                      boxShadow: (theme.boxShadow as any)?.medium ?? '0 4px 6px -1px rgba(0, 0, 0, 0.1)',\n                    }}\n                  />\n                  <Line\n                    type='monotone'\n                    dataKey='users'\n                    stroke={colors['primary-500']}\n                    strokeWidth={3}\n                    dot={{ fill: colors['primary-500'], strokeWidth: 2, r: 6 }}\n                    name='Utilisateurs'\n                  />\n                  <Line\n                    type='monotone'\n                    dataKey='completion'\n                    stroke={colors['accent-600']}\n                    strokeWidth={3}\n                    dot={{ fill: colors['accent-600'], strokeWidth: 2, r: 6 }}\n                    name='Taux de completion %'\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </motion.div>\n        </motion.div>\n\n        {/* Bottom Row */}\n        <motion.div\n          variants={containerVariants}\n          initial='hidden'\n          whileInView='visible'\n          viewport={{ once: true }}\n          className='grid md:grid-cols-2 lg:grid-cols-3 gap-8'\n        >\n          {/* Skill Distribution */}\n          <motion.div\n            variants={itemVariants}\n            className='bg-surface border border-border rounded-xl p-6 shadow-subtle hover:shadow-medium transition-shadow duration-300'\n          >\n            <div className='flex items-center justify-between mb-6'>\n              <h3 className='text-lg font-semibold text-text-primary'>R├®partition des niveaux</h3>\n              <Icon aria-hidden='true' name='PieChart' size={20} className='text-warning' />\n            </div>\n            <div className='h-48'>\n              <ResponsiveContainer width='100%' height='100%'>\n                <PieChart>\n                  <Pie\n                    data={skillDistributionData}\n                    cx='50%'\n                    cy='50%'\n                    innerRadius={40}\n                    outerRadius={80}\n                    paddingAngle={5}\n                    dataKey='value'\n                  >\n                    {skillDistributionData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={entry.color} />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n            <div className='space-y-2'>\n              {skillDistributionData.map((item, index) => (\n                <div key={index} className='flex items-center justify-between text-sm'>\n                  <div className='flex items-center'>\n                    <div\n                      className='w-3 h-3 rounded-full mr-2'\n                      style={{ backgroundColor: item.color }}\n                    ></div>\n                    <span className='text-text-secondary'>{item.name}</span>\n                  </div>\n                  <span className='font-medium text-text-primary'>{item.value}%</span>\n                </div>\n              ))}\n            </div>\n          </motion.div>\n\n          {/* Key Metrics */}\n          <motion.div\n            variants={itemVariants}\n            className='bg-gradient-to-br from-primary-50 to-accent-50 border border-border rounded-xl p-6'\n          >\n            <div className='flex items-center mb-6'>\n              <Icon aria-hidden='true' name='Target' size={24} className='text-primary mr-3' />\n              <h3 className='text-lg font-semibold text-text-primary'>M├®triques cl├®s</h3>\n            </div>\n            <div className='space-y-4'>\n              <div className='flex justify-between items-center'>\n                <span className='text-text-secondary'>Temps d&rsquo;apprentissage moyen</span>\n                <span className='font-bold text-primary'>2.5h/semaine</span>\n              </div>\n              <div className='flex justify-between items-center'>\n                <span className='text-text-secondary'>ROI moyen</span>\n                <span className='font-bold text-accent'>340%</span>\n              </div>\n              <div className='flex justify-between items-center'>\n                <span className='text-text-secondary'>Certification obtenue</span>\n                <span className='font-bold text-warning'>87%</span>\n              </div>\n              <div className='flex justify-between items-center'>\n                <span className='text-text-secondary'>Recommandation</span>\n                <span className='font-bold text-primary'>9.2/10</span>\n              </div>\n            </div>\n          </motion.div>\n\n          {/* Success Story */}\n          <motion.div\n            variants={itemVariants}\n            className='bg-surface border border-border rounded-xl p-6 shadow-subtle hover:shadow-medium transition-shadow duration-300'\n          >\n            <div className='flex items-center mb-4'>\n              <Icon aria-hidden='true' name='Quote' size={20} className='text-accent mr-2' />\n              <h3 className='text-lg font-semibold text-text-primary'>T├®moignage</h3>\n            </div>\n            <blockquote className='text-text-secondary mb-4 italic'>\n              &ldquo;Gr├óce ├á AI Foundations, j&rsquo;ai automatis├® 60% de mes t├óches comptables. Un gain de\n              temps incroyable !&rdquo;\n            </blockquote>\n            <div className='flex items-center'>\n              <div className='w-10 h-10 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center mr-3'>\n                <Icon aria-hidden='true' name='User' size={16} color='white' />\n              </div>\n              <div>\n                <div className='font-medium text-text-primary'>Marie Dubois</div>\n                <div className='text-sm text-text-secondary'>Expert-comptable</div>\n              </div>\n            </div>\n          </motion.div>\n        </motion.div>\n      </div>\n    </section>\n  );\n};\n\nexport default DataVisualization;\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\public-homepage\\components\\Footer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\public-homepage\\components\\HeroSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\public-homepage\\components\\ProgramOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\public-homepage\\components\\TestimonialsCarousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\public-homepage\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\user-dashboard\\components\\AchievementCarousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\user-dashboard\\components\\ProgressChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\user-dashboard\\components\\QuickActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\user-dashboard\\components\\RecentActivity.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\user-dashboard\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\user-management-admin\\components\\BulkActionsBar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\user-management-admin\\components\\CreateUserModal.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\user-management-admin\\components\\UserDetailsPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\user-management-admin\\components\\UserFilters.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6302,6305],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6302,6305],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from 'react';\nimport Icon from '@frontend/components/AppIcon';\nimport type { AdminFilters } from '../index';\n\ninterface UserFiltersProps {\n  filters: AdminFilters;\n  setFilters: React.Dispatch<React.SetStateAction<AdminFilters>>;\n}\n\nconst UserFilters: React.FC<UserFiltersProps> = ({ filters, setFilters }) => {\n  const handleFilterChange = (key: keyof AdminFilters, value: string) => {\n    setFilters(prev => ({\n      ...prev,\n      [key]: value,\n    }));\n  };\n\n  const clearAllFilters = () => {\n    setFilters({\n      status: 'all',\n      role: 'all',\n      registrationDate: 'all',\n      activityLevel: 'all',\n      courseProgress: 'all',\n    });\n  };\n\n  const hasActiveFilters = Object.values(filters).some(value => value !== 'all');\n\n  return (\n    <div className='space-y-4'>\n      {/* Filter Row */}\n      <div className='grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-5 gap-4'>\n        {/* Status Filter */}\n        <div>\n          <label className='block text-xs font-medium text-text-secondary mb-1'>Statut</label>\n          <select\n            value={filters.status}\n            onChange={e => handleFilterChange('status', e.target.value)}\n            className='w-full px-3 py-2 border border-border rounded-lg text-sm focus:ring-2 focus:ring-primary focus:border-transparent'\n          >\n            <option value='all'>Tous les statuts</option>\n            <option value='active'>Actif</option>\n            <option value='inactive'>Inactif</option>\n            <option value='pending'>En attente</option>\n          </select>\n        </div>\n\n        {/* Role Filter */}\n        <div>\n          <label className='block text-xs font-medium text-text-secondary mb-1'>R├┤le</label>\n          <select\n            value={filters.role}\n            onChange={e => handleFilterChange('role', e.target.value)}\n            className='w-full px-3 py-2 border border-border rounded-lg text-sm focus:ring-2 focus:ring-primary focus:border-transparent'\n          >\n            <option value='all'>Tous les r├┤les</option>\n            <option value='student'>├ëtudiant</option>\n            <option value='admin'>Administrateur</option>\n          </select>\n        </div>\n\n        {/* Registration Date Filter */}\n        <div>\n          <label className='block text-xs font-medium text-text-secondary mb-1'>Inscription</label>\n          <select\n            value={filters.registrationDate}\n            onChange={e => handleFilterChange('registrationDate', e.target.value)}\n            className='w-full px-3 py-2 border border-border rounded-lg text-sm focus:ring-2 focus:ring-primary focus:border-transparent'\n          >\n            <option value='all'>Toutes les dates</option>\n            <option value='today'>Aujourd&rsquo;hui</option>\n            <option value='week'>Cette semaine</option>\n            <option value='month'>Ce mois</option>\n            <option value='quarter'>Ce trimestre</option>\n            <option value='year'>Cette ann├®e</option>\n          </select>\n        </div>\n\n        {/* Activity Level Filter */}\n        <div>\n          <label className='block text-xs font-medium text-text-secondary mb-1'>Activit├®</label>\n          <select\n            value={filters.activityLevel}\n            onChange={e => handleFilterChange('activityLevel', e.target.value)}\n            className='w-full px-3 py-2 border border-border rounded-lg text-sm focus:ring-2 focus:ring-primary focus:border-transparent'\n          >\n            <option value='all'>Tous les niveaux</option>\n            <option value='high'>Tr├¿s actif</option>\n            <option value='medium'>Mod├®r├®ment actif</option>\n            <option value='low'>Peu actif</option>\n            <option value='dormant'>Inactif</option>\n          </select>\n        </div>\n\n        {/* Course Progress Filter */}\n        <div>\n          <label className='block text-xs font-medium text-text-secondary mb-1'>Progression</label>\n          <select\n            value={filters.courseProgress}\n            onChange={e => handleFilterChange('courseProgress', e.target.value)}\n            className='w-full px-3 py-2 border border-border rounded-lg text-sm focus:ring-2 focus:ring-primary focus:border-transparent'\n          >\n            <option value='all'>Toutes progressions</option>\n            <option value='0-25'>0-25%</option>\n            <option value='26-50'>26-50%</option>\n            <option value='51-75'>51-75%</option>\n            <option value='76-100'>76-100%</option>\n            <option value='completed'>Termin├® (100%)</option>\n          </select>\n        </div>\n      </div>\n\n      {/* Active Filters & Clear */}\n      {hasActiveFilters && (\n        <div className='flex items-center justify-between pt-2 border-t border-border'>\n          <div className='flex items-center space-x-2'>\n            <Icon aria-hidden='true' name='Filter' size={16} className='text-text-secondary' />\n            <span className='text-sm text-text-secondary'>Filtres actifs:</span>\n            <div className='flex flex-wrap gap-2'>\n              {Object.entries(filters).map(([key, value]) => {\n                if (value === 'all') return null;\n\n                const filterLabels = {\n                  status: { active: 'Actif', inactive: 'Inactif', pending: 'En attente' },\n                  role: { student: '├ëtudiant', admin: 'Admin' },\n                  registrationDate: {\n                    today: \"Aujourd&rsquo;hui\",\n                    week: 'Cette semaine',\n                    month: 'Ce mois',\n                    quarter: 'Ce trimestre',\n                    year: 'Cette ann├®e',\n                  },\n                  activityLevel: {\n                    high: 'Tr├¿s actif',\n                    medium: 'Mod├®r├®',\n                    low: 'Peu actif',\n                    dormant: 'Inactif',\n                  },\n                  courseProgress: {\n                    '0-25': '0-25%',\n                    '26-50': '26-50%',\n                    '51-75': '51-75%',\n                    '76-100': '76-100%',\n                    completed: 'Termin├®',\n                  },\n                };\n\n                const filterGroup = filterLabels[key as keyof typeof filterLabels];\n                const label = (filterGroup && typeof filterGroup === 'object' && value in filterGroup) \n                  ? (filterGroup as any)[value] \n                  : value;\n\n                return (\n                  <span\n                    key={key}\n                    className='inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-primary-100 text-primary-700'\n                  >\n                    {label}\n                    <button\n                      onClick={() => handleFilterChange(key as keyof AdminFilters, 'all')}\n                      className='ml-1 hover:text-primary-900 transition-colors'\n                    >\n                      <Icon name='X' size={12} aria-label='Supprimer filtre' />\n                    </button>\n                  </span>\n                );\n              })}\n            </div>\n          </div>\n\n          <button\n            onClick={clearAllFilters}\n            className='inline-flex items-center px-3 py-1 text-sm text-text-secondary hover:text-primary transition-colors'\n          >\n            <Icon aria-hidden='true' name='X' size={14} className='mr-1' />\n            Effacer tout\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default UserFilters;\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\user-management-admin\\components\\UserTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\user-management-admin\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\user-profile-management\\components\\LearningStatsTab.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1844,1847],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1844,1847],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useMemo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { colors } from '@frontend/utils/theme';\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell,\n} from 'recharts';\nimport { useAuth } from '@frontend/context/AuthContext';\nimport { useCourses } from '@frontend/context/CourseContext';\nimport { useAchievements } from '@frontend/hooks/useAchievements';\nimport { useRecentActivity } from '@frontend/hooks/useRecentActivity';\nimport Icon from '@frontend/components/AppIcon';\n\ninterface WeeklyData {\n  day: string;\n  minutes: number;\n  xp: number;\n  lessons: number;\n}\n\ninterface SubjectData {\n  name: string;\n  value: number;\n  fill: string;\n}\n\ninterface Stats {\n  hasData: boolean;\n  completedLessonsCount: number;\n  inProgressLessonsCount: number;\n  totalLearningTime: number;\n  coursesCompleted: number;\n  weeklyData: WeeklyData[];\n  subjectData: SubjectData[];\n}\n\nconst LearningStatsTab: React.FC = () => {\n  const { user, userProfile } = useAuth();\n  // On utilise la version corrig├®e et coh├®rente des variables\n  const { coursesWithProgress: courses, isLoading: coursesLoading } = useCourses();\n  const { achievements } = useAchievements(user?.id, { order: 'desc' });\n  const { activities } = useRecentActivity(user?.id, { limit: 50, order: 'desc' });\n\n  const stats: Stats = useMemo(() => {\n    // On utilise les bonnes variables ici\n    if (coursesLoading || !courses || courses.length === 0) {\n      return {\n        hasData: false,\n        completedLessonsCount: 0,\n        inProgressLessonsCount: 0,\n        totalLearningTime: 0,\n        coursesCompleted: 0,\n        weeklyData: [],\n        subjectData: [] as SubjectData[],\n      };\n    }\n\n    const userProgress = courses.flatMap(course =>\n      (course as any).lessons || []\n        ?.map((lesson: { progress?: { status?: string } }) => lesson.progress)\n        .filter((p: { status?: string } | undefined): p is { status?: string } => Boolean(p)) || []\n    );\n\n    const completedLessons = userProgress.filter(p => p?.status === 'completed');\n    const inProgressLessons = userProgress.filter(p => p?.status === 'in_progress');\n\n    // --- Weekly Progress ---\n    const days = ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim'];\n    const weeklyData = days.map(day => ({ day, minutes: 0, xp: 0, lessons: 0 }));\n    const lastWeek = new Date();\n    lastWeek.setDate(lastWeek.getDate() - 7);\n    activities.forEach(activity => {\n      const activityDate = new Date(activity.created_at ?? new Date());\n      if (activityDate >= lastWeek) {\n        const dayIndex = (activityDate.getDay() + 6) % 7;\n        if (activity.type === 'lesson_completed') {\n          const dayData = weeklyData[dayIndex];\n          if (dayData) {\n            dayData.lessons += 1;\n            dayData.minutes += 15;\n            dayData.xp += 50;\n          }\n        }\n      }\n    });\n\n    // --- Subject Distribution ---\n    const subjects: Record<string, number> = {};\n    courses.forEach(course => {\n      const category = course.category || 'IA G├®n├®rale';\n      subjects[category] = (subjects[category] || 0) + 1;\n    });\n    const chartColors = [\n      colors.primary,\n      colors.accent,\n      colors.warning,\n      colors.error,\n      colors.info,\n      colors.secondary,\n    ];\n    const subjectData = Object.entries(subjects).map(([name, value], index) => ({\n      name,\n      value,\n      fill: chartColors[index % chartColors.length] ?? '#3b82f6',\n    }));\n\n    // --- Overview Stats ---\n    const totalLearningTime = Math.floor(completedLessons.length * 0.25);\n    const coursesCompleted = courses.filter(\n      course => course.progress?.completed === course.progress?.total\n    ).length;\n\n    return {\n      hasData: userProgress.length > 0,\n      completedLessonsCount: completedLessons.length,\n      inProgressLessonsCount: inProgressLessons.length,\n      totalLearningTime,\n      coursesCompleted,\n      weeklyData,\n      subjectData,\n    };\n    // On s'assure que les d├®pendances du hook sont correctes\n  }, [courses, activities, coursesLoading]);\n\n  const currentStreak = userProfile?.current_streak || 0;\n  const currentLevel = userProfile?.level || 1;\n\n  // On utilise la bonne variable pour l'├®tat de chargement\n  if (coursesLoading) {\n    return (\n      <div className='flex justify-center items-center h-64'>\n        <Icon aria-hidden='true' name='Loader' className='animate-spin text-primary' size={40} />\n        <p className='ml-4 text-text-secondary'>Chargement de vos statistiques...</p>\n      </div>\n    );\n  }\n\n  if (!stats.hasData) {\n    return (\n      <div className='bg-surface rounded-lg border border-border p-12 text-center'>\n        <Icon\n          aria-hidden='true'\n          name='BarChart3'\n          size={64}\n          className='mx-auto mb-6 text-secondary-300'\n        />\n        <h3 className='text-xl font-semibold text-text-primary mb-2'>\n          Commencez votre parcours d&rsquo;apprentissage\n        </h3>\n        <p className='text-text-secondary mb-6'>\n          Vos statistiques d&rsquo;apprentissage appara├«tront ici une fois que vous aurez commenc├® des\n          cours.\n        </p>\n        <Link\n          to='/programmes'\n          className='inline-flex items-center px-6 py-3 bg-primary text-white rounded-lg hover:bg-primary-700 transition-colors'\n        >\n          <Icon aria-hidden='true' name='BookOpen' size={20} className='mr-2' />\n          D├®couvrir les cours\n        </Link>\n      </div>\n    );\n  }\n\n  return (\n    <div className='space-y-8'>\n      {/* Header */}\n      <div>\n        <h3 className='text-lg font-semibold text-text-primary'>Statistiques d&rsquo;apprentissage</h3>\n        <p className='text-text-secondary text-sm mt-1'>\n          Suivez vos progr├¿s et analysez vos performances d&rsquo;apprentissage\n        </p>\n      </div>\n\n      {/* Overview Cards */}\n      <div className='grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6'>\n        <div className='bg-gradient-to-br from-primary-50 to-primary-100 rounded-lg p-6 border border-primary-200'>\n          <div className='flex items-center justify-between'>\n            <div>\n              <p className='text-primary-600 text-sm font-medium'>Temps total</p>\n              <p className='text-2xl font-bold text-primary-700'>{stats.totalLearningTime}h</p>\n            </div>\n            <div className='w-12 h-12 bg-primary-500 rounded-lg flex items-center justify-center'>\n              <Icon aria-hidden='true' name='Clock' size={24} color='white' />\n            </div>\n          </div>\n        </div>\n\n        <div className='bg-gradient-to-br from-accent-50 to-accent-100 rounded-lg p-6 border border-accent-200'>\n          <div className='flex items-center justify-between'>\n            <div>\n              <p className='text-accent-600 text-sm font-medium'>Cours termin├®s</p>\n              <p className='text-2xl font-bold text-accent-700'>{stats.coursesCompleted}</p>\n            </div>\n            <div className='w-12 h-12 bg-accent-500 rounded-lg flex items-center justify-center'>\n              <Icon aria-hidden='true' name='BookOpen' size={24} color='white' />\n            </div>\n          </div>\n        </div>\n\n        <div className='bg-gradient-to-br from-orange-50 to-orange-100 rounded-lg p-6 border border-orange-200'>\n          <div className='flex items-center justify-between'>\n            <div>\n              <p className='text-orange-600 text-sm font-medium'>S├®rie actuelle</p>\n              <p className='text-2xl font-bold text-orange-700'>{currentStreak} jours</p>\n            </div>\n            <div className='w-12 h-12 bg-orange-500 rounded-lg flex items-center justify-center'>\n              <Icon aria-hidden='true' name='Flame' size={24} color='white' />\n            </div>\n          </div>\n        </div>\n\n        <div className='bg-gradient-to-br from-purple-50 to-purple-100 rounded-lg p-6 border border-purple-200'>\n          <div className='flex items-center justify-between'>\n            <div>\n              <p className='text-purple-600 text-sm font-medium'>Niveau actuel</p>\n              <p className='text-2xl font-bold text-purple-700'>{currentLevel}</p>\n            </div>\n            <div className='w-12 h-12 bg-purple-500 rounded-lg flex items-center justify-center'>\n              <Icon aria-hidden='true' name='Trophy' size={24} color='white' />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Charts Section */}\n      <div className='grid grid-cols-1 lg:grid-cols-2 gap-8'>\n        {/* Weekly Progress */}\n        <div className='bg-surface rounded-lg border border-border p-6'>\n          <h4 className='text-base font-semibold text-text-primary mb-4'>Progr├¿s hebdomadaire</h4>\n          {stats.weeklyData.length > 0 ? (\n            <div className='h-64'>\n              <ResponsiveContainer width='100%' height='100%'>\n                <BarChart data={stats.weeklyData}>\n                  <CartesianGrid strokeDasharray='3 3' stroke={colors.border} />\n                  <XAxis dataKey='day' stroke={colors.secondary} fontSize={12} />\n                  <YAxis stroke={colors.secondary} fontSize={12} />\n                  <Tooltip\n                    contentStyle={{\n                      backgroundColor: colors.surface,\n                      border: `1px solid ${colors.border}`,\n                      borderRadius: '8px',\n                      fontSize: '12px',\n                    }}\n                  />\n                  <Bar dataKey='minutes' fill={colors.primary} radius={[4, 4, 0, 0]} />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          ) : (\n            <div className='h-64 flex items-center justify-center text-text-secondary'>\n              <div className='text-center'>\n                <Icon\n                  aria-hidden='true'\n                  name='BarChart3'\n                  size={48}\n                  className='mx-auto mb-4 opacity-50'\n                />\n                <p>Aucune donn├®e d&rsquo;apprentissage cette semaine</p>\n                <p className='text-sm'>Commencez une le├ºon pour voir vos statistiques</p>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* XP Progress */}\n        <div className='bg-surface rounded-lg border border-border p-6'>\n          <h4 className='text-base font-semibold text-text-primary mb-4'>├ëvolution XP</h4>\n          {stats.weeklyData.length > 0 && stats.weeklyData.some(d => d.xp > 0) ? (\n            <div className='h-64'>\n              <ResponsiveContainer width='100%' height='100%'>\n                <LineChart data={stats.weeklyData}>\n                  <CartesianGrid strokeDasharray='3 3' stroke={colors.border} />\n                  <XAxis dataKey='day' stroke={colors.secondary} fontSize={12} />\n                  <YAxis stroke={colors.secondary} fontSize={12} />\n                  <Tooltip\n                    contentStyle={{\n                      backgroundColor: colors.surface,\n                      border: `1px solid ${colors.border}`,\n                      borderRadius: '8px',\n                      fontSize: '12px',\n                    }}\n                  />\n                  <Line\n                    type='monotone'\n                    dataKey='xp'\n                    stroke={colors.accent}\n                    strokeWidth={3}\n                    dot={{ fill: colors.accent, strokeWidth: 2, r: 4 }}\n                  />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          ) : (\n            <div className='h-64 flex items-center justify-center text-text-secondary'>\n              <div className='text-center'>\n                <Icon\n                  aria-hidden='true'\n                  name='TrendingUp'\n                  size={48}\n                  className='mx-auto mb-4 opacity-50'\n                />\n                <p>Aucun XP gagn├® cette semaine</p>\n                  <p className='text-sm'>Terminez des le├ºons pour gagner de l&rsquo;XP</p>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Subject Distribution */}\n        <div className='bg-surface rounded-lg border border-border p-6'>\n          <h4 className='text-base font-semibold text-text-primary mb-4'>R├®partition des cours</h4>\n          {stats.subjectData.length > 0 ? (\n            <>\n              <div className='h-64'>\n                <ResponsiveContainer width='100%' height='100%'>\n                  <PieChart>\n                    <Pie\n                      data={stats.subjectData}\n                      cx='50%'\n                      cy='50%'\n                      innerRadius={60}\n                      outerRadius={100}\n                      paddingAngle={5}\n                      dataKey='value'\n                    >\n                      {stats.subjectData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.fill} />\n                      ))}\n                    </Pie>\n                    <Tooltip\n                      contentStyle={{\n                        backgroundColor: colors.surface,\n                        border: `1px solid ${colors.border}`,\n                        borderRadius: '8px',\n                        fontSize: '12px',\n                      }}\n                    />\n                  </PieChart>\n                </ResponsiveContainer>\n              </div>\n              <div className='grid grid-cols-2 gap-2 mt-4'>\n                {stats.subjectData.map((subject, index) => (\n                  <div key={index} className='flex items-center space-x-2'>\n                    <div\n                      className='w-3 h-3 rounded-full'\n                      style={{ backgroundColor: subject.fill }}\n                    ></div>\n                    <span className='text-xs text-text-secondary'>{subject.name}</span>\n                  </div>\n                ))}\n              </div>\n            </>\n          ) : (\n            <div className='h-64 flex items-center justify-center text-text-secondary'>\n              <div className='text-center'>\n                <Icon\n                  aria-hidden='true'\n                  name='PieChart'\n                  size={48}\n                  className='mx-auto mb-4 opacity-50'\n                />\n                <p>Aucun cours inscrit</p>\n                <p className='text-sm'>Inscrivez-vous ├á des cours pour voir la r├®partition</p>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Activity Summary */}\n        <div className='bg-surface rounded-lg border border-border p-6'>\n          <h4 className='text-base font-semibold text-text-primary mb-4'>R├®sum├® d&rsquo;activit├®</h4>\n          <div className='space-y-4'>\n            <div className='flex items-center justify-between p-3 bg-secondary-50 rounded-lg'>\n              <div className='flex items-center space-x-3'>\n                <Icon aria-hidden='true' name='BookOpen' size={20} className='text-primary' />\n                <span className='text-sm font-medium text-text-primary'>Le├ºons termin├®es</span>\n              </div>\n              <span className='text-lg font-bold text-primary'>{stats.completedLessonsCount}</span>\n            </div>\n\n            <div className='flex items-center justify-between p-3 bg-secondary-50 rounded-lg'>\n              <div className='flex items-center space-x-3'>\n                <Icon aria-hidden='true' name='Clock' size={20} className='text-accent' />\n                <span className='text-sm font-medium text-text-primary'>Le├ºons en cours</span>\n              </div>\n              <span className='text-lg font-bold text-accent'>{stats.inProgressLessonsCount}</span>\n            </div>\n\n            <div className='flex items-center justify-between p-3 bg-secondary-50 rounded-lg'>\n              <div className='flex items-center space-x-3'>\n                <Icon aria-hidden='true' name='Award' size={20} className='text-warning' />\n                <span className='text-sm font-medium text-text-primary'>R├®alisations</span>\n              </div>\n              <span className='text-lg font-bold text-warning'>{achievements.length}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Achievements Gallery */}\n      {achievements.length > 0 && (\n        <div className='bg-surface rounded-lg border border-border p-6'>\n          <h4 className='text-base font-semibold text-text-primary mb-6'>\n            R├®alisations d├®bloqu├®es\n          </h4>\n          <div className='grid grid-cols-1 md:grid-cols-3 gap-6'>\n            {achievements.map(achievement => (\n              <div\n                key={achievement.id}\n                className='bg-gradient-to-br from-secondary-50 to-secondary-100 rounded-lg p-4 border border-secondary-200'\n              >\n                <div className='flex items-start space-x-4'>\n                  <div className='w-12 h-12 bg-gradient-to-br from-primary to-primary-700 rounded-lg flex items-center justify-center flex-shrink-0'>\n                    <Icon aria-hidden='true' name='Award' size={24} color='white' />\n                  </div>\n                  <div className='flex-1 min-w-0'>\n                    <h5 className='text-sm font-semibold text-text-primary mb-1'>\n                      {achievement.title}\n                    </h5>\n                    <p className='text-xs text-text-secondary mb-2'>{achievement.description}</p>\n                    <div className='flex items-center justify-between'>\n                      <span className='inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-primary-100 text-primary-700'>\n                        {achievement.rarity}\n                      </span>\n                      <span className='text-xs text-text-secondary'>\n                        {new Date(achievement.created_at ?? new Date()).toLocaleDateString('fr-FR')}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n\n      {/* Learning Goals */}\n      <div className='bg-surface rounded-lg border border-border p-6'>\n        <h4 className='text-base font-semibold text-text-primary mb-4'>\n          Objectifs d&rsquo;apprentissage\n        </h4>\n        <div className='space-y-4'>\n          <div className='flex items-center justify-between p-4 bg-secondary-50 rounded-lg'>\n            <div className='flex items-center space-x-3'>\n              <Icon aria-hidden='true' name='Target' size={20} className='text-primary' />\n              <div>\n                <p className='text-sm font-medium text-text-primary'>Objectif quotidien</p>\n                <p className='text-xs text-text-secondary'>Maintenir votre s├®rie d&rsquo;apprentissage</p>\n              </div>\n            </div>\n            <div className='text-right'>\n              <p className='text-sm font-semibold text-accent'>{currentStreak} jours</p>\n              <p className='text-xs text-text-secondary'>S├®rie actuelle</p>\n            </div>\n          </div>\n\n          <div className='flex items-center justify-between p-4 bg-secondary-50 rounded-lg'>\n            <div className='flex items-center space-x-3'>\n              <Icon aria-hidden='true' name='Calendar' size={20} className='text-primary' />\n              <div>\n                <p className='text-sm font-medium text-text-primary'>Progression niveau</p>\n                <p className='text-xs text-text-secondary'>Vers le niveau {currentLevel + 1}</p>\n              </div>\n            </div>\n            <div className='text-right'>\n              <p className='text-sm font-semibold text-primary'>{userProfile?.xp || 0} XP</p>\n              <p className='text-xs text-text-secondary'>Points actuels</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LearningStatsTab;\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\user-profile-management\\components\\PersonalInfoTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\user-profile-management\\components\\SettingsTab.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\user-profile-management\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\pages\\verify-email\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\services\\authService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'isUserAdmin' is defined but never used.","line":9,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":52}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * MASTERCLASS AUTHENTICATION SERVICE\n * ===================================\n * Service d'authentification optimis├® avec gestion des claims JWT\n * et pr├®vention des r├®f├®rences circulaires\n */\n\nimport { supabase } from '@frontend/lib/supabase';\nimport { getUserClaims, syncUserClaims, isUserAdmin, type AuthClaims } from '@frontend/lib/auth-claims';\nimport { log } from '@libs/logger';\nimport type { User, Session } from '@supabase/supabase-js';\nimport type { UserProfile } from '@frontend/types/user';\n\nexport interface AuthState {\n  user: User | null;\n  session: Session | null;\n  claims: AuthClaims | null;\n  profile: UserProfile | null;\n  loading: boolean;\n  error: Error | null;\n}\n\nexport class AuthService {\n  private static instance: AuthService;\n  private state: AuthState = {\n    user: null,\n    session: null,\n    claims: null,\n    profile: null,\n    loading: true,\n    error: null,\n  };\n\n  private constructor() {}\n\n  public static getInstance(): AuthService {\n    if (!AuthService.instance) {\n      AuthService.instance = new AuthService();\n    }\n    return AuthService.instance;\n  }\n\n  /**\n   * Initialise le service d'authentification\n   */\n  public async initialize(): Promise<AuthState> {\n    try {\n      log.debug('­ƒöä Initializing auth service...');\n      \n      // R├®cup├®rer la session courante\n      const { data: { session }, error } = await supabase.auth.getSession();\n      \n      if (error) {\n        log.error('ÔØî Error getting session:', error);\n        this.state.error = error;\n        this.state.loading = false;\n        return this.state;\n      }\n\n      if (session?.user) {\n        await this.handleUserSession(session.user, session);\n      }\n\n      this.state.loading = false;\n      log.debug('Ô£à Auth service initialized');\n      return this.state;\n    } catch (error) {\n      log.error('ÔØî Error initializing auth service:', error);\n      this.state.error = error instanceof Error ? error : new Error('Auth initialization failed');\n      this.state.loading = false;\n      return this.state;\n    }\n  }\n\n  /**\n   * G├¿re une session utilisateur de mani├¿re optimis├®e\n   */\n  private async handleUserSession(user: User, session: Session): Promise<void> {\n    try {\n      log.debug('­ƒæñ Handling user session for:', user.email);\n      \n      // 1. D├®finir l'utilisateur et la session\n      this.state.user = user;\n      this.state.session = session;\n\n      // 2. R├®cup├®rer les claims (optimis├® pour ├®viter les r├®f├®rences circulaires)\n      this.state.claims = await getUserClaims(user);\n      log.debug('­ƒÄ½ User claims loaded:', this.state.claims);\n\n      // 3. R├®cup├®rer le profil de mani├¿re s├®curis├®e\n      await this.loadUserProfile(user);\n\n      // 4. Synchroniser les claims si n├®cessaire\n      if (this.state.claims && this.state.profile) {\n        await this.ensureClaimsSync(user, this.state.claims, this.state.profile);\n      }\n\n      this.state.error = null;\n    } catch (error) {\n      log.error('ÔØî Error handling user session:', error);\n      this.state.error = error instanceof Error ? error : new Error('Session handling failed');\n    }\n  }\n\n  /**\n   * Charge le profil utilisateur de mani├¿re s├®curis├®e\n   */\n  private async loadUserProfile(user: User): Promise<void> {\n    try {\n      // Utiliser une requ├¬te simple sans d├®clencher les politiques RLS probl├®matiques\n      const { data: profile, error } = await supabase\n        .from('profiles')\n        .select('*')\n        .eq('id', user.id)\n        .single();\n\n      if (error) {\n        log.error('ÔØî Error loading user profile:', error);\n        \n        // Si le profil n'existe pas, le cr├®er\n        if (error.code === 'PGRST116') {\n          await this.createUserProfile(user);\n        } else {\n          throw error;\n        }\n      } else {\n        this.state.profile = profile as UserProfile;\n        log.debug('Ô£à User profile loaded successfully');\n      }\n    } catch (error) {\n      log.error('ÔØî Error in loadUserProfile:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Cr├®e un profil utilisateur par d├®faut\n   */\n  private async createUserProfile(user: User): Promise<void> {\n    try {\n      log.debug('­ƒôØ Creating default user profile...');\n      \n      const defaultProfile: Partial<UserProfile> = {\n        id: user.id,\n        email: user.email || '',\n        full_name: user.user_metadata?.full_name || 'User',\n        level: 1,\n        xp: 0,\n        current_streak: 0,\n        is_admin: false,\n        avatar_url: null,\n        phone: null,\n        profession: null,\n        company: null,\n        last_completed_at: null,\n        created_at: new Date().toISOString(),\n        updated_at: new Date().toISOString(),\n      };\n\n      const { data: newProfile, error } = await supabase\n        .from('profiles')\n        .insert([defaultProfile])\n        .select()\n        .single();\n\n      if (error) {\n        log.error('ÔØî Error creating user profile:', error);\n        throw error;\n      }\n\n      this.state.profile = newProfile as UserProfile;\n      log.debug('Ô£à Default user profile created successfully');\n    } catch (error) {\n      log.error('ÔØî Error in createUserProfile:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * S'assure que les claims sont synchronis├®s\n   */\n  private async ensureClaimsSync(user: User, claims: AuthClaims, profile: UserProfile): Promise<void> {\n    try {\n      // V├®rifier si les claims sont d├®synchronis├®s\n      if (claims.is_admin !== profile.is_admin) {\n        log.debug('­ƒöä Claims out of sync, updating...');\n        \n        // Mettre ├á jour les claims avec les donn├®es du profil\n        const updatedClaims: AuthClaims = {\n          ...claims,\n          is_admin: profile.is_admin,\n          role: profile.is_admin ? 'admin' : 'user',\n        };\n\n        await syncUserClaims(user.id, updatedClaims);\n        this.state.claims = updatedClaims;\n        \n        log.debug('Ô£à Claims synchronized successfully');\n      }\n    } catch (error) {\n      log.error('ÔØî Error syncing claims:', error);\n      // Ne pas faire ├®chouer l'authentification pour un probl├¿me de sync\n    }\n  }\n\n  /**\n   * R├®cup├¿re l'├®tat actuel de l'authentification\n   */\n  public getState(): AuthState {\n    return { ...this.state };\n  }\n\n  /**\n   * V├®rifie si l'utilisateur est admin\n   */\n  public isAdmin(): boolean {\n    return this.state.claims?.is_admin ?? false;\n  }\n\n  /**\n   * V├®rifie si l'utilisateur est authentifi├®\n   */\n  public isAuthenticated(): boolean {\n    return !!this.state.user && !!this.state.session;\n  }\n\n  /**\n   * D├®connecte l'utilisateur\n   */\n  public async signOut(): Promise<void> {\n    try {\n      log.debug('­ƒÜ¬ Signing out user...');\n      \n      await supabase.auth.signOut();\n      \n      // R├®initialiser l'├®tat\n      this.state = {\n        user: null,\n        session: null,\n        claims: null,\n        profile: null,\n        loading: false,\n        error: null,\n      };\n      \n      log.debug('Ô£à User signed out successfully');\n    } catch (error) {\n      log.error('ÔØî Error signing out:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Rafra├«chit la session utilisateur\n   */\n  public async refreshSession(): Promise<void> {\n    try {\n      log.debug('­ƒöä Refreshing session...');\n      \n      const { data: { session }, error } = await supabase.auth.refreshSession();\n      \n      if (error) {\n        log.error('ÔØî Error refreshing session:', error);\n        throw error;\n      }\n\n      if (session?.user) {\n        await this.handleUserSession(session.user, session);\n      }\n      \n      log.debug('Ô£à Session refreshed successfully');\n    } catch (error) {\n      log.error('ÔØî Error in refreshSession:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Met ├á jour le profil utilisateur\n   */\n  public async updateProfile(updates: Partial<UserProfile>): Promise<UserProfile> {\n    try {\n      if (!this.state.user) {\n        throw new Error('User not authenticated');\n      }\n\n      log.debug('­ƒôØ Updating user profile...');\n      \n      const { data: updatedProfile, error } = await supabase\n        .from('profiles')\n        .update(updates)\n        .eq('id', this.state.user.id)\n        .select()\n        .single();\n\n      if (error) {\n        log.error('ÔØî Error updating profile:', error);\n        throw error;\n      }\n\n      this.state.profile = updatedProfile as UserProfile;\n      \n      // Synchroniser les claims si le statut admin a chang├®\n      if (updates.is_admin !== undefined && this.state.claims) {\n        const updatedClaims: AuthClaims = {\n          ...this.state.claims,\n          is_admin: updates.is_admin,\n          role: updates.is_admin ? 'admin' : 'user',\n        };\n        \n        await syncUserClaims(this.state.user.id, updatedClaims);\n        this.state.claims = updatedClaims;\n      }\n\n      log.debug('Ô£à Profile updated successfully');\n      return this.state.profile;\n    } catch (error) {\n      log.error('ÔØî Error in updateProfile:', error);\n      throw error;\n    }\n  }\n}\n\n// Export de l'instance singleton\nexport const authService = AuthService.getInstance();","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\services\\courseService.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":63,"column":12,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":63,"endColumn":32,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[1844,1845],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// apps/frontend/src/services/courseService.ts\nimport { supabase } from '@/lib/supabase';\nimport { \n  CourseWithProgressSchema, \n  BaseCourseSchema,\n  type CourseWithProgress, \n  type CourseFilters, \n  type CourseSortOption, \n  type PaginationOptions, \n  type PaginatedCoursesResult\n} from '@/types/course.types';\nimport { log } from '@libs/logger';\nimport { z } from 'zod';\n\n// Initialisation du client Supabase\nconst supabaseClient = supabase;\n\n// Constantes pour la pagination par d├®faut\nconst DEFAULT_PAGE = 1;\nconst DEFAULT_PAGE_SIZE = 12;\n\n// Cache pour les requ├¬tes\ninterface CacheEntry<T> {\n  data: T;\n  timestamp: number;\n}\n\nconst cache = new Map<string, CacheEntry<PaginatedCoursesResult>>();\nconst CACHE_TTL = 5 * 60 * 1000; // 5 minutes\n\n/**\n * V├®rifie si le cache est toujours valide\n */\nfunction isCacheValid(key: string): boolean {\n  const cached = cache.get(key);\n  if (!cached) return false;\n  return Date.now() - cached.timestamp < CACHE_TTL;\n}\n\n// Note: Cache cleaning is now handled by TanStack Query's built-in cache management\n// Manual cache cleanup removed to prevent memory leaks\n\n/**\n * R├®cup├¿re une liste pagin├®e de cours avec leur progression\n */\nexport async function fetchCourses({\n  filters = {},\n  sortBy = 'progress_desc',\n  pagination = { page: DEFAULT_PAGE, pageSize: DEFAULT_PAGE_SIZE },\n}: {\n  filters?: CourseFilters;\n  sortBy?: CourseSortOption;\n  pagination?: Partial<PaginationOptions>;\n} = {}): Promise<PaginatedCoursesResult> {\n  const { search = '', skillLevel = [], category = [], status = [] } = filters;\n  const { page = DEFAULT_PAGE, pageSize = DEFAULT_PAGE_SIZE } = pagination;\n  \n  // Cr├®er une cl├® de cache unique pour cette requ├¬te\n  const cacheKey = JSON.stringify({ filters, sortBy, page, pageSize });\n  \n  // V├®rifier le cache\n  if (isCacheValid(cacheKey)) {\n    return cache.get(cacheKey)!.data;\n  }\n  \n  try {\n    // Construire la requ├¬te sur la vue user_course_progress\n    let query = supabaseClient\n      .from('user_course_progress')\n      .select('*', { count: 'exact' });\n    \n    // Appliquer les filtres\n    if (search) {\n      query = query.ilike('title', `%${search}%`);\n    }\n    \n    if (skillLevel.length) {\n      query = query.in('difficulty', skillLevel);\n    }\n    \n    if (category.length) {\n      query = query.in('category', category);\n    }\n    \n    // Filtrer par statut de progression\n    if (status.length) {\n      const statusConditions = status.map(s => {\n        switch (s) {\n          case 'completed':\n            return 'completion_percentage = 100';\n          case 'in_progress':\n            return 'completion_percentage > 0 AND completion_percentage < 100';\n          case 'not_started':\n            return 'completion_percentage = 0 OR completion_percentage IS NULL';\n          default:\n            return '';\n        }\n      }).filter(Boolean);\n      \n      if (statusConditions.length) {\n        query = query.or(statusConditions.join(' OR '));\n      }\n    }\n\n    // Appliquer le tri\n    const [sortField, sortDirection] = sortBy.split('_') as [string, 'asc' | 'desc'];\n    const ascending = sortDirection === 'asc';\n    \n    // Mapper les champs de tri aux noms de colonnes de la vue\n    const sortMapping: Record<string, string> = {\n      title: 'title',\n      difficulty: 'difficulty',\n      progress: 'completion_percentage',\n      last_activity: 'last_activity_at',\n    };\n    \n    const sortFieldMapped = sortMapping[sortField] || 'completion_percentage';\n    \n    // Appliquer le tri\n    query = query.order(sortFieldMapped, { \n      ascending,\n      nullsFirst: sortDirection === 'desc',\n    });\n\n    // Pagination\n    const from = (page - 1) * pageSize;\n    const to = from + pageSize - 1;\n    query = query.range(from, to);\n\n    // Ex├®cuter la requ├¬te\n    const { data, error, count } = await query;\n    \n    if (error) {\n      log.error('Error fetching courses', error);\n      throw new Error(`Failed to fetch courses: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n\n    // Valider et transformer les donn├®es (utiliser BaseCourseSchema pour les cours simples)\n    const validatedData = z.array(BaseCourseSchema).safeParse(data || []);\n\n    if (!validatedData.success) {\n      log.error('Course data validation failed', {\n        issues: validatedData.error.format(),\n        rawData: data?.[0], // Log first course for debugging\n      });\n      \n      // Validation failed - throw error instead of continuing with invalid data\n      log.error('Course data validation failed - aborting operation', {\n        issues: validatedData.error.format(),\n        rawDataSample: data?.[0]\n      });\n      throw new Error('Invalid course data received from server. Please check the database schema.');\n    }\n\n    // Use validated data directly from user_course_progress view\n    // This view already contains the proper user-specific progress data\n    const coursesWithProgress = validatedData.data;\n\n    // Cr├®er le r├®sultat pagin├® avec transformation des types\n    const result: PaginatedCoursesResult = {\n      data: coursesWithProgress.map(course => ({\n        ...course,\n        progress: {\n          percentage: 0,\n          completed: 0,\n          total: 0,\n          lastActivityAt: null,\n          status: 'not_started' as const\n        },\n        total_lessons: 0,\n        completed_lessons: 0,\n        completion_percentage: 0,\n        last_accessed: null,\n        last_activity_at: null,\n        status: 'not_started' as const,\n        enrolled_at: null,\n        lessons: [],\n        average_rating: 0,\n        enrolled_students: 0,\n        duration_minutes: 0,\n        instructor: 'System',\n        requirements: [],\n        objectives: [],\n        is_new: false,\n        duration: '0h 00min',\n        user_id: 'anonymous'\n      })),\n      pagination: {\n        page,\n        pageSize,\n        total: count || 0,\n      },\n    };\n    \n    // Mettre en cache le r├®sultat\n    cache.set(cacheKey, { data: result, timestamp: Date.now() });\n    \n    return result;\n    \n  } catch (error) {\n    log.error('Unexpected error in fetchCourses', error);\n    throw error;\n  }\n}\n\n/**\n * R├®cup├¿re un cours avec tout son contenu (modules et le├ºons)\n */\nexport async function fetchCourseWithContent(courseId: string): Promise<CourseWithProgress> {\n  try {\n    // R├®cup├®rer le cours avec sa progression\n    const { data: courseData, error: courseError } = await supabaseClient\n      .from('user_course_progress')\n      .select('*')\n      .eq('id', courseId)\n      .single();\n\n    if (courseError || !courseData) {\n      throw new Error(courseError?.message || 'Course not found');\n    }\n\n    // R├®cup├®rer les modules et le├ºons\n    const { data: modulesData, error: modulesError } = await supabaseClient\n      .from('modules')\n      .select(`\n        *,\n        lessons (\n          *,\n          user_progress!inner (\n            completed_at,\n            status\n          )\n        )`)\n      .eq('course_id', courseId)\n      .eq('is_published', true)\n      .order('module_order', { ascending: true });\n\n    if (modulesError) {\n      throw new Error(`Failed to fetch modules: ${modulesError.message}`);\n    }\n\n    // Valider et transformer les donn├®es\n    const validatedCourse = CourseWithProgressSchema.parse(courseData) as CourseWithProgress;\n    \n    // Ajouter les modules et le├ºons au cours\n    const courseWithContent: CourseWithProgress = {\n      ...validatedCourse,\n      modules: modulesData || [],\n    };\n\n    return courseWithContent;\n    \n  } catch (error) {\n    log.error(`Error fetching course ${courseId} with content`, error);\n    throw error;\n  }\n}\n\nexport async function fetchCoursesWithContent(): Promise<CourseWithProgress[]> {\n  const { data, error } = await supabaseClient\n    .from('user_course_progress')\n    .select(\n      `*, modules(*, lessons(*, user_progress!inner(completed_at, status)))`\n    );\n\n  if (error) {\n    throw new Error(error.message);\n  }\n\n  return (data || []).map(d =>\n    CourseWithProgressSchema.parse(d) as CourseWithProgress\n  );\n}\n\nexport const CoursesFromSupabaseSchema = z.object({\n  courses: z.array(CourseWithProgressSchema),\n  lessons: z.array(z.unknown()),\n  modules: z.array(z.unknown()),\n  userProgress: z.array(z.unknown()),\n});\n\nexport type CoursesFromSupabase = z.infer<typeof CoursesFromSupabaseSchema>;\n\nexport async function fetchCoursesFromSupabase(_userId: string): Promise<CoursesFromSupabase> {\n  const { data } = await fetchCourses();\n  \n  // Normaliser les donn├®es pour s'assurer qu'elles correspondent au sch├®ma attendu\n  const normalizedCourses = (data || []).map(course => ({\n    ...course,\n    // S'assurer que created_at est toujours une cha├«ne non nulle\n    created_at: course.created_at || new Date().toISOString(),\n    // S'assurer que is_published est toujours un bool├®en (par d├®faut ├á false)\n    is_published: course.is_published ?? false,\n    // S'assurer que les champs obligatoires ont des valeurs par d├®faut\n    duration: course.duration || '0h 00',\n    progress: {\n      completed: course.completed_lessons || 0,\n      total: course.total_lessons || 0,\n      percentage: course.completion_percentage || 0,\n      lastActivityAt: course.last_activity_at || null,\n      status: course.status || 'not_started',\n    },\n  }));\n\n  // Valider les donn├®es transform├®es avec le sch├®ma\n  const validatedData = CourseWithProgressSchema.array().parse(normalizedCourses);\n\n  return {\n    courses: validatedData,\n    lessons: [],\n    modules: [],\n    userProgress: [],\n  };\n}\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\services\\storageService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\services\\userService.ts","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":67,"column":46,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":67,"endColumn":77}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { SupabaseClient, User } from '@supabase/supabase-js';\nimport { supabase } from '@frontend/lib/supabase';\nimport type { Database, Json } from '@frontend/types/database.types';\nimport type {\n  UpdateUserProfilePayload,\n  UpdateUserProfileResponse,\n} from '@frontend/types/rpc.types';\nimport type { UserProfile } from '@frontend/types/user';\nimport type {\n  UserSettings,\n  NotificationSettings,\n  PrivacySettings,\n  LearningPreferences,\n} from '@frontend/types/userSettings';\nimport {\n  NotificationSettingsSchema,\n  PrivacySettingsSchema,\n  LearningPreferencesSchema,\n} from '@frontend/types/userSettingsSchemas';\nimport { log } from '@libs/logger';\n\nconst supabaseClient = supabase as SupabaseClient<Database>;\n\nconst toJson = <T extends Json>(v: T): Json => v;\n\nconst parseNotificationSettings = (v: Json | null): NotificationSettings => {\n  const parsed = NotificationSettingsSchema.safeParse(v);\n  if (!parsed.success) {\n    throw new Error(`Invalid notification settings: ${parsed.error.message}`);\n  }\n  return parsed.data;\n};\n\nconst parsePrivacySettings = (v: Json | null): PrivacySettings => {\n  const parsed = PrivacySettingsSchema.safeParse(v);\n  if (!parsed.success) {\n    throw new Error(`Invalid privacy settings: ${parsed.error.message}`);\n  }\n  return parsed.data;\n};\n\nconst parseLearningPreferences = (v: Json | null): LearningPreferences => {\n  const parsed = LearningPreferencesSchema.safeParse(v);\n  if (!parsed.success) {\n    throw new Error(`Invalid learning preferences: ${parsed.error.message}`);\n  }\n  return parsed.data;\n};\n\nexport async function fetchUserProfile(user: User): Promise<UserProfile> {\n  // V├®rifier la session actuelle avant de faire la requ├¬te\n  const { data: sessionData, error: sessionError } = await supabaseClient.auth.getSession();\n  \n  if (sessionError) {\n    log.error('ÔØî Session error:', sessionError);\n    throw new Error('Session not valid');\n  }\n  \n  if (!sessionData.session) {\n    log.error('ÔØî No active session found');\n    throw new Error('No active session');\n  }\n  \n  log.debug('­ƒôï Session user ID:', sessionData.session.user.id);\n  log.debug('­ƒôï Requested user ID:', user.id);\n  log.debug('­ƒôï Session access token length:', sessionData.session.access_token.length);\n  log.debug('­ƒôï Token expires at:', new Date(sessionData.session.expires_at! * 1000).toISOString());\n  \n  // V├®rifier si le token n'est pas expir├®\n  const now = Math.floor(Date.now() / 1000);\n  if (sessionData.session.expires_at && sessionData.session.expires_at < now) {\n    log.error('ÔØî Token is expired');\n    throw new Error('Token expired - please sign in again');\n  }\n  \n  // Forcer l'utilisation du token en configurant les headers\n  const { data: profileData, error } = await supabaseClient\n    .from('profiles')\n    .select('*')\n    .eq('id', user.id);\n\n  if (error) {\n    log.error('ÔØî Error fetching user profile:', error);\n    log.error('ÔØî Error code:', error.code);\n    log.error('ÔØî Error message:', error.message);\n    log.error('ÔØî Error details:', error.details);\n    \n    // Si c'est une erreur 500, c'est probablement un probl├¿me d'authentification JWT\n    if (error.message.includes('Internal Server Error') || error.message.includes('500')) {\n      log.error('ÔØî 500 error detected - likely JWT authentication issue');\n      \n      // Essayer de rafra├«chir la session\n      try {\n        const { data: refreshData, error: refreshError } = await supabaseClient.auth.refreshSession();\n        if (refreshError) {\n          log.error('ÔØî Session refresh failed:', refreshError);\n          throw new Error('Authentication failed - please sign in again');\n        }\n        \n        if (refreshData.session) {\n          log.debug('Ô£à Session refreshed successfully');\n          // Retry la requ├¬te avec la session rafra├«chie\n          const { data: retryData, error: retryError } = await supabaseClient\n            .from('profiles')\n            .select('*')\n            .eq('id', user.id);\n            \n          if (retryError) {\n            log.error('ÔØî Retry failed after session refresh:', retryError);\n            throw new Error('Authentication failed - please sign in again');\n          }\n          \n          if (retryData && retryData.length > 0) {\n            return retryData[0] as UserProfile;\n          }\n        }\n      } catch (refreshErr) {\n        log.error('ÔØî Session refresh attempt failed:', refreshErr);\n        throw new Error('Authentication failed - please sign in again');\n      }\n    }\n    \n    // If it's an authentication/RLS error, throw a more specific error\n    if (error.message.includes('row-level security') || error.message.includes('authentication')) {\n      throw new Error('User not properly authenticated');\n    }\n    throw error;\n  }\n\n  if (!profileData || profileData.length === 0) {\n    const defaultProfile: UserProfile = {\n      id: user.id,\n      email: user.email || '',\n      full_name: (user.user_metadata as { full_name?: string })?.full_name || 'User',\n      level: 1,\n      xp: 0,\n      current_streak: 0,\n      is_admin: false,\n      avatar_url: null,\n      phone: null,\n      profession: null,\n      company: null,\n      last_completed_at: null,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString(),\n    };\n\n    const { data: newProfile, error: createError } = await supabaseClient\n      .from('profiles')\n      .insert([defaultProfile])\n      .select()\n      .single();\n\n    if (createError) throw createError;\n    return newProfile as UserProfile;\n  }\n\n  return profileData[0] as UserProfile;\n}\n\nexport async function updateUserProfile(\n  userId: string,\n  updates: UpdateUserProfilePayload['profile_data']\n): Promise<UpdateUserProfileResponse> {\n  const { data, error } = await supabaseClient.rpc('update_user_profile', {\n    profile_data: updates,\n    user_id: userId,\n  });\n\n  if (error) throw error;\n\n  const profileData = (Array.isArray(data) ? data[0] : data) as UpdateUserProfileResponse;\n  if (!profileData) throw new Error('No data returned from update_user_profile');\n  return profileData;\n}\n\nexport async function getUserSettings(userId: string): Promise<UserSettings | null> {\n  const { data, error } = await supabaseClient\n    .from('user_settings')\n    .select('*')\n    .eq('user_id', userId);\n\n  if (error) throw error;\n\n  if (data && data.length > 0) {\n    const settings = data[0];\n    if (!settings) {\n      throw new Error('No settings data found');\n    }\n    return {\n      id: settings.id,\n      user_id: settings.user_id,\n      notification_settings: parseNotificationSettings(settings.notification_settings),\n      privacy_settings: parsePrivacySettings(settings.privacy_settings),\n      learning_preferences: parseLearningPreferences(settings.learning_preferences),\n      created_at: settings.created_at || null,\n      updated_at: settings.updated_at || null,\n    };\n  }\n\n  const defaultSettings = {\n    user_id: userId,\n    notification_settings: toJson({\n      emailNotifications: true,\n      pushNotifications: false,\n      weeklyReport: true,\n      achievementAlerts: true,\n      reminderNotifications: true,\n    }),\n    privacy_settings: toJson({\n      profileVisibility: 'private',\n      showProgress: false,\n      showAchievements: true,\n      allowMessages: false,\n    }),\n    learning_preferences: toJson({\n      dailyGoal: 30,\n      preferredDuration: 'medium',\n      difficultyProgression: 'adaptive',\n      language: 'fr',\n      autoplay: true,\n    }),\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n  };\n\n  const { data: newSettings, error: createError } = await supabaseClient\n    .from('user_settings')\n    .insert([defaultSettings])\n    .select()\n    .single();\n\n  if (createError) throw createError;\n\n  if (!newSettings) {\n    throw new Error('Failed to create new settings');\n  }\n  \n  return {\n    id: newSettings.id,\n    user_id: newSettings.user_id,\n    notification_settings: parseNotificationSettings(newSettings.notification_settings),\n    privacy_settings: parsePrivacySettings(newSettings.privacy_settings),\n    learning_preferences: parseLearningPreferences(newSettings.learning_preferences),\n    created_at: newSettings.created_at || null,\n    updated_at: newSettings.updated_at || null,\n  };\n}\n\nexport async function updateUserSettings(\n  userId: string,\n  updates: Partial<UserSettings>\n): Promise<UserSettings | null> {\n  const current = await getUserSettings(userId);\n\n  const merged = {\n    ...current,\n    ...updates,\n    user_id: userId,\n    updated_at: new Date().toISOString(),\n  };\n\n  // Convertir les objets en JSON de mani├¿re s├╗re\n  const notificationSettingsJson = merged.notification_settings \n    ? toJson(merged.notification_settings as unknown as Json) \n    : null;\n  \n  const privacySettingsJson = merged.privacy_settings \n    ? toJson(merged.privacy_settings as unknown as Json) \n    : null;\n    \n  const learningPreferencesJson = merged.learning_preferences \n    ? toJson(merged.learning_preferences as unknown as Json) \n    : null;\n\n  const { data, error } = await supabaseClient\n    .from('user_settings')\n    .update({\n      notification_settings: notificationSettingsJson,\n      privacy_settings: privacySettingsJson,\n      learning_preferences: learningPreferencesJson,\n      updated_at: merged.updated_at,\n    })\n    .eq('user_id', userId)\n    .select();\n\n  if (error) throw error;\n\n  if (data && data.length > 0) {\n    const updated = data[0];\n    if (!updated) {\n      throw new Error('No updated settings data found');\n    }\n    return {\n      id: updated.id,\n      user_id: updated.user_id,\n      notification_settings: parseNotificationSettings(updated.notification_settings),\n      privacy_settings: parsePrivacySettings(updated.privacy_settings),\n      learning_preferences: parseLearningPreferences(updated.learning_preferences),\n      created_at: updated.created_at || null,\n      updated_at: updated.updated_at || null,\n    };\n  }\n\n  return null;\n}\n\n","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\setupTests.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\adminUser.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\app-error.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\course.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\database.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\framer-motion-fixes.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\framer-motion.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[279,282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[279,282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[298,301],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[298,301],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":11,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":11,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[314,317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[314,317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[336,339],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[336,339],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":13,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[356,359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[356,359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[559,562],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[559,562],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[649,652],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[649,652],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[671,674],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[671,674],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":25,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":25,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[691,694],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[691,694],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[712,715],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[712,715],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":27,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":27,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[734,737],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[734,737],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":28,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":28,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[757,760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[757,760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[777,780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[777,780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[961,964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[961,964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[972,975],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[972,975],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1012,1015],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1012,1015],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1023,1026],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1023,1026],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1061,1064],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1061,1064],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1072,1075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1072,1075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":37,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":37,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1113,1116],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1113,1116],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1152,1155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1152,1155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1186,1189],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1186,1189],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1225,1228],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1225,1228],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1265,1268],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1265,1268],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1299,1302],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1299,1302],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1310,1313],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1310,1313],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1349,1352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1349,1352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1360,1363],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1360,1363],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1397,1400],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1397,1400],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1408,1411],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1408,1411],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1441,1444],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1441,1444],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1562,1565],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1562,1565],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2833,2836],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2833,2836],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3011,3014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3011,3014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3058,3061],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3058,3061],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3064,3067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3064,3067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3107,3110],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3107,3110],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3119,3122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3119,3122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3132,3135],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3132,3135],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3147,3150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3147,3150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":85,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":88,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3153,3156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3153,3156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3194,3197],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3194,3197],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3209,3212],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3209,3212],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3215,3218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3215,3218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3258,3261],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3258,3261],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3264,3267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3264,3267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3314,3317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3314,3317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":75,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":78,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3343,3346],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3343,3346],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3388,3391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3388,3391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3403,3406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3403,3406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3464,3467],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3464,3467],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":106,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3505,3508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3505,3508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3547,3550],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3547,3550],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3553,3556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3553,3556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3598,3601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3598,3601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":108,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":108,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3604,3607],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3604,3607],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3648,3651],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3648,3651],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3690,3693],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3690,3693],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3737,3740],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3737,3740],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3779,3782],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3779,3782],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3788,3791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3788,3791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4015,4018],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4015,4018],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4031,4034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4031,4034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4046,4049],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4046,4049],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":118,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":118,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4052,4055],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4052,4055],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4094,4097],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4094,4097],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4103,4106],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4103,4106],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4118,4121],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4118,4121],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4124,4127],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4124,4127],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4164,4167],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4164,4167],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4179,4182],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4179,4182],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4185,4188],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4185,4188],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4224,4227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4224,4227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4239,4242],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4239,4242],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4254,4257],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4254,4257],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":121,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":121,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4260,4263],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4260,4263],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4300,4303],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4300,4303],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":122,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":122,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4306,4309],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4306,4309],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4359,4362],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4359,4362],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4388,4391],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4388,4391],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":127,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":127,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4419,4422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4419,4422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4447,4450],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4447,4450],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4476,4479],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4476,4479],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4507,4510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4507,4510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4535,4538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4535,4538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":132,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4564,4567],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4564,4567],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":133,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":133,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4595,4598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4595,4598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4627,4630],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4627,4630],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4700,4703],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4700,4703],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4718,4721],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4718,4721],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4733,4736],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4733,4736],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4739,4742],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4739,4742],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4781,4784],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4781,4784],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4798,4801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4798,4801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4816,4819],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4816,4819],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4831,4834],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4831,4834],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":94,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":97,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4837,4840],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4837,4840],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4870,4873],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4870,4873],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4879,4882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4879,4882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4894,4897],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4894,4897],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4900,4903],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4900,4903],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":140,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4935,4938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4935,4938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":140,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4943,4946],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4943,4946],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4984,4987],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4984,4987],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":141,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":141,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4992,4995],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4992,4995],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5034,5037],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5034,5037],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5044,5047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5044,5047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5056,5059],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5056,5059],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5062,5065],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5062,5065],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5096,5099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5096,5099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5106,5109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5106,5109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5118,5121],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5118,5121],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":143,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":143,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5124,5127],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5124,5127],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":147,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":147,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5311,5314],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5311,5314],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":148,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":148,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5417,5420],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5417,5420],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":150,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":150,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5500,5503],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5500,5503],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":151,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":151,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5530,5533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5530,5533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":155,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":155,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5592,5595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5592,5595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":156,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":156,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5620,5623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5620,5623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'MotionStyle' is defined but never used.","line":160,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":160,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'CSSStyleDeclarationWithTransform' is defined but never used.","line":174,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":174,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":121,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Type augmentation pour framer-motion v12.23.6\ndeclare module 'framer-motion' {\n  export * from 'framer-motion/dist/index';\n  \n  import type { ComponentType, ReactNode, CSSProperties } from 'react';\n  \n  // Motion component types\n  export interface MotionProps {\n    initial?: any;\n    animate?: any;\n    exit?: any;\n    transition?: any;\n    variants?: any;\n    style?: CSSProperties;\n    className?: string;\n    children?: ReactNode;\n    layout?: boolean | 'position' | 'size';\n    layoutId?: string;\n    drag?: boolean | 'x' | 'y';\n    dragConstraints?: any;\n    dragElastic?: number | boolean;\n    dragMomentum?: boolean;\n    dragTransition?: any;\n    whileHover?: any;\n    whileTap?: any;\n    whileDrag?: any;\n    whileFocus?: any;\n    whileInView?: any;\n    viewport?: any;\n    onAnimationStart?: () => void;\n    onAnimationComplete?: () => void;\n    onLayoutAnimationStart?: () => void;\n    onLayoutAnimationComplete?: () => void;\n    onDrag?: (event: any, info: any) => void;\n    onDragStart?: (event: any, info: any) => void;\n    onDragEnd?: (event: any, info: any) => void;\n    onHoverStart?: (event: any) => void;\n    onHoverEnd?: (event: any) => void;\n    onTap?: (event: any) => void;\n    onTapStart?: (event: any) => void;\n    onTapCancel?: (event: any) => void;\n    onPan?: (event: any, info: any) => void;\n    onPanStart?: (event: any, info: any) => void;\n    onPanEnd?: (event: any, info: any) => void;\n    [key: string]: any;\n  }\n  \n  // Motion HTML elements\n  export interface MotionDivProps extends MotionProps {\n    id?: string;\n    ref?: any;\n  }\n  \n  export interface Motion {\n    div: ComponentType<MotionDivProps>;\n    section: ComponentType<MotionProps>;\n    article: ComponentType<MotionProps>;\n    header: ComponentType<MotionProps>;\n    footer: ComponentType<MotionProps>;\n    nav: ComponentType<MotionProps>;\n    main: ComponentType<MotionProps>;\n    aside: ComponentType<MotionProps>;\n    h1: ComponentType<MotionProps>;\n    h2: ComponentType<MotionProps>;\n    h3: ComponentType<MotionProps>;\n    h4: ComponentType<MotionProps>;\n    h5: ComponentType<MotionProps>;\n    h6: ComponentType<MotionProps>;\n    p: ComponentType<MotionProps>;\n    span: ComponentType<MotionProps>;\n    a: ComponentType<MotionProps>;\n    img: ComponentType<MotionProps>;\n    button: ComponentType<MotionProps>;\n    input: ComponentType<MotionProps>;\n    form: ComponentType<MotionProps>;\n    ul: ComponentType<MotionProps>;\n    ol: ComponentType<MotionProps>;\n    li: ComponentType<MotionProps>;\n    [key: string]: ComponentType<MotionProps>;\n  }\n  \n  export const motion: Motion;\n  \n  // AnimatePresence component\n  export interface AnimatePresenceProps {\n    children?: ReactNode;\n    initial?: boolean;\n    exitBeforeEnter?: boolean;\n    mode?: 'sync' | 'wait' | 'popLayout';\n    onExitComplete?: () => void;\n    custom?: any;\n    presenceAffectsLayout?: boolean;\n  }\n  \n  export const AnimatePresence: ComponentType<AnimatePresenceProps>;\n  \n  // Utility functions\n  export function useAnimation(): any;\n  export function useMotionValue(initial: any): any;\n  export function useTransform(value: any, input: any, output: any, options?: any): any;\n  export function useSpring(source: any, options?: any): any;\n  export function useScroll(options?: any): any;\n  export function useMotionValueEvent(value: any, event: string, handler: any): void;\n  export function useInView(ref: any, options?: any): boolean;\n  export function useAnimationFrame(callback: any): void;\n  export function useTime(): any;\n  export function useVelocity(value: any): any;\n  export function useElementScroll(ref: any): any;\n  export function useViewportScroll(): any;\n  export function useDragControls(): any;\n  export function useAnimationControls(): any;\n  export function useCycle(...items: any[]): [any, () => void];\n  export function useReducedMotion(): boolean;\n  export function usePresence(): [boolean, () => void];\n  export function useIsPresent(): boolean;\n  \n  // Animation utilities\n  export function animate(element: any, keyframes: any, options?: any): any;\n  export function animateValue(from: any, to: any, options?: any): any;\n  export function scroll(onScroll: any, options?: any): any;\n  export function inView(element: any, onStart?: any, options?: any): any;\n  export function resize(onResize: any): any;\n  \n  // Easing functions\n  export const easeIn: any;\n  export const easeOut: any;\n  export const easeInOut: any;\n  export const circIn: any;\n  export const circOut: any;\n  export const circInOut: any;\n  export const backIn: any;\n  export const backOut: any;\n  export const backInOut: any;\n  export const anticipate: any;\n  \n  // Transform utilities\n  export function transform(inputRange: any, outputRange: any, options?: any): any;\n  export function interpolate(input: any, inputRange: any, outputRange: any, options?: any): any;\n  export function mix(from: any, to: any, progress: any): any;\n  export function distance(a: any, b: any): number;\n  export function angle(a: any, b: any): number;\n  export function wrap(min: any, max: any, value: any): any;\n  export function clamp(min: any, max: any, value: any): any;\n  \n  // Layout utilities\n  export const LayoutGroup: ComponentType<{ children?: ReactNode; id?: string }>;\n  export const LazyMotion: ComponentType<{ children?: ReactNode; features: any; strict?: boolean }>;\n  export const MotionConfig: ComponentType<{ children?: ReactNode; transition?: any; reducedMotion?: string }>;\n  export const Reorder: {\n    Group: ComponentType<any>;\n    Item: ComponentType<any>;\n  };\n  \n  // Feature flags\n  export const domAnimation: any;\n  export const domMax: any;\n  export const m: Motion;\n  \n  // Legacy interfaces pour compatibility\n  interface MotionStyle {\n    x?: string;\n    y?: string;\n    z?: string;\n    scale?: string;\n    rotate?: string;\n    rotateX?: string;\n    rotateY?: string;\n    rotateZ?: string;\n    skew?: string;\n    skewX?: string;\n    skewY?: string;\n  }\n  \n  interface CSSStyleDeclarationWithTransform {\n    x?: string;\n    y?: string;\n    z?: string;\n    scale?: string;\n    rotate?: string;\n    rotateX?: string;\n    rotateY?: string;\n    rotateZ?: string;\n    skew?: string;\n    skewX?: string;\n    skewY?: string;\n  }\n}","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\global.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\metrics.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\nprogress.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\polymorphic.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\react-router-complete.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[418,421],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[418,421],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":10,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":10,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[425,428],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[425,428],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[531,534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[531,534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[648,651],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[648,651],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":20,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":20,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[655,658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[655,658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[761,764],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[761,764],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[914,917],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[914,917],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1435,1438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1435,1438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2477,2480],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2477,2480],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2672,2675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2672,2675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":128,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":128,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3615,3618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3615,3618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":139,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":139,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3881,3884],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3881,3884],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5133,5136],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5133,5136],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":206,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":206,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5579,5582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5579,5582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":207,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5619,5622],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5619,5622],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":231,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":231,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6134,6137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6134,6137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":250,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6650,6653],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6650,6653],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":257,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6777,6780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6777,6780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":270,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":270,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7031,7034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7031,7034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":272,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":272,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7074,7077],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7074,7077],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":273,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":273,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7092,7095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7092,7095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":294,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":294,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7655,7658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7655,7658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":321,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":321,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8617,8620],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8617,8620],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":353,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":353,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9581,9584],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9581,9584],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":355,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":355,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9769,9772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9769,9772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AgnosticRouteObject' is defined but never used.","line":387,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":387,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AgnosticIndexRouteObject' is defined but never used.","line":388,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":388,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'AgnosticNonIndexRouteObject' is defined but never used.","line":389,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":389,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":1,"message":"'TrackedPromise' is defined but never used.","line":392,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":392,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":439,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":439,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11633,11636],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11633,11636],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":440,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":440,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11674,11677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11674,11677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":442,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":442,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11770,11773],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11770,11773],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":443,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":443,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11825,11828],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11825,11828],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":457,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":457,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12183,12186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12183,12186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":458,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":458,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12224,12227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12224,12227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":460,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":460,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12320,12323],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12320,12323],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":461,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":461,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12375,12378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12375,12378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":475,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":475,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12747,12750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12747,12750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":476,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":476,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12788,12791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12788,12791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":478,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":478,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12884,12887],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12884,12887],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":479,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":479,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12939,12942],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12939,12942],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":522,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":522,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14031,14034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14031,14034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":539,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":539,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14438,14441],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14438,14441],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":541,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":541,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14496,14499],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14496,14499],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":543,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":543,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14592,14595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14592,14595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":544,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":544,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14647,14650],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14647,14650],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":560,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":560,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15064,15067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15064,15067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":562,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":562,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15122,15125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15122,15125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":564,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":564,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15218,15221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15218,15221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":565,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":565,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15273,15276],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15273,15276],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":595,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":595,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15984,15987],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15984,15987],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":596,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":596,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16024,16027],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16024,16027],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":721,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":721,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20137,20140],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20137,20140],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":722,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":722,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20189,20192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20189,20192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":723,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":723,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20263,20266],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20263,20266],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":55,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Comprehensive React Router compatibility fixes for exactOptionalPropertyTypes\n * Based on React Router v6.26.2 official documentation and type definitions\n */\n\n// Fix @remix-run/router exports that are missing or incompatible\ndeclare module '@remix-run/router' {\n  // Basic types that should be exported\n  export interface ActionFunction {\n    (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n  }\n\n  export interface ActionFunctionArgs {\n    request: Request;\n    params: Params;\n    context?: any;\n  }\n\n  export interface LoaderFunction {\n    (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n  }\n\n  export interface LoaderFunctionArgs {\n    request: Request;\n    params: Params;\n    context?: any;\n  }\n\n  export type Params<Key extends string = string> = {\n    readonly [key in Key]: string | undefined;\n  };\n\n  export interface Location<State = any> {\n    pathname: string;\n    search: string;\n    hash: string;\n    state: State;\n    key: string;\n  }\n\n  export interface Router {\n    state: RouterState;\n    subscribe(fn: RouterSubscriber): () => void;\n    navigate(to: To | number, opts?: RouterNavigateOptions): Promise<void>;\n    fetch(key: string, routeId: string, href: string, opts?: RouterFetchOptions): Promise<void>;\n    revalidate(): Promise<void>;\n    createHref(location: Location | To): string;\n    encodeLocation?(to: To): Path;\n    getFetcher<TData = any>(key?: string): Fetcher<TData>;\n    deleteFetcher(key?: string): void;\n    dispose(): void;\n    getBlocker(key: string, fn: BlockerFunction): Blocker;\n    deleteBlocker(key: string): void;\n    _internalFetchControllers: Map<string, AbortController>;\n    _internalActiveDeferreds: Map<string, DeferredData>;\n    _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n  }\n\n  export interface RouterState {\n    historyAction: Action;\n    location: Location;\n    matches: AgnosticDataRouteMatch[];\n    initialized: boolean;\n    navigation: Navigation;\n    restoreScrollPosition: boolean | null;\n    preventScrollReset: boolean;\n    revalidation: RevalidationState;\n    loaderData: RouteData;\n    actionData: RouteData | null;\n    errors: RouteData | null;\n    fetchers: Map<string, Fetcher>;\n    blockers: Map<string, Blocker>;\n  }\n\n  export type To = string | Partial<Path>;\n\n  export interface Path {\n    pathname: string;\n    search: string;\n    hash: string;\n  }\n\n  export interface NavigateOptions {\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n    flushSync?: boolean;\n  }\n\n  export type RelativeRoutingType = \"route\" | \"path\";\n\n  export interface Fetcher<TData = any> {\n    state: \"idle\" | \"loading\" | \"submitting\";\n    formMethod?: FormMethod;\n    formAction?: string;\n    formEncType?: FormEncType;\n    formData?: FormData;\n    data?: TData;\n  }\n\n  export type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\n  export type FormEncType = \"application/x-www-form-urlencoded\" | \"multipart/form-data\";\n\n  export interface BlockerFunction {\n    (args: { currentLocation: Location; nextLocation: Location }): boolean;\n  }\n\n  export interface Blocker {\n    state: \"unblocked\" | \"blocked\" | \"proceeding\";\n    reset(): void;\n    proceed(): void;\n    location?: Location;\n  }\n\n  export interface Navigation {\n    state: \"idle\" | \"loading\" | \"submitting\";\n    location?: Location;\n    formMethod?: FormMethod;\n    formAction?: string;\n    formEncType?: FormEncType;\n    formData?: FormData;\n  }\n\n  export type RevalidationState = \"idle\" | \"loading\";\n\n  export interface RouteData {\n    [routeId: string]: any;\n  }\n\n  export interface AgnosticRouteObject {\n    caseSensitive?: false;\n    path?: string;\n    id?: string;\n    loader?: LoaderFunction;\n    action?: ActionFunction;\n    hasErrorBoundary?: boolean;\n    shouldRevalidate?: ShouldRevalidateFunction;\n    handle?: any;\n    index?: boolean;\n    children?: AgnosticRouteObject[];\n  }\n\n  export interface AgnosticIndexRouteObject extends AgnosticRouteObject {\n    caseSensitive?: false;\n    children?: never;\n    index: true;\n  }\n\n  export interface AgnosticNonIndexRouteObject extends AgnosticRouteObject {\n    caseSensitive?: false;\n    children?: AgnosticRouteObject[];\n    index?: false;\n  }\n\n  export interface AgnosticDataRouteMatch extends AgnosticRouteMatch {\n    route: AgnosticDataRouteObject;\n  }\n\n  export interface AgnosticRouteMatch<\n    ParamKey extends string = string,\n    RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n  > {\n    params: Params<ParamKey>;\n    pathname: string;\n    pathnameBase: string;\n    route: RouteObjectType;\n  }\n\n  export interface AgnosticDataRouteObject extends AgnosticRouteObject {\n    hasErrorBoundary: boolean;\n    id: string;\n  }\n\n  export interface ShouldRevalidateFunction {\n    (args: ShouldRevalidateFunctionArgs): boolean;\n  }\n\n  export interface ShouldRevalidateFunctionArgs {\n    currentUrl: URL;\n    currentParams: Params;\n    nextUrl: URL;\n    nextParams: Params;\n    formMethod?: FormMethod;\n    formAction?: string;\n    formEncType?: FormEncType;\n    formData?: FormData;\n    actionResult?: any;\n    defaultShouldRevalidate: boolean;\n  }\n\n  export interface HydrationState {\n    loaderData?: RouteData;\n    actionData?: RouteData | null;\n    errors?: RouteData | null;\n  }\n\n  export type Action = \"POP\" | \"PUSH\" | \"REPLACE\";\n\n  export interface History {\n    readonly action: Action;\n    readonly location: Location;\n    createHref(to: To): string;\n    createURL(to: To): URL;\n    encodeLocation?(to: To): Path;\n    push(to: To, state?: any): void;\n    replace(to: To, state?: any): void;\n    go(delta: number): void;\n    back(): void;\n    forward(): void;\n    listen(listener: Listener): () => void;\n    block(blocker: Blocker): () => void;\n  }\n\n  export interface Listener {\n    (update: Update): void;\n  }\n\n  export interface Update {\n    action: Action;\n    location: Location;\n    delta: number | null;\n  }\n\n  export type HTMLFormMethod = \"get\" | \"post\";\n  export type V7_FormMethod = FormMethod;\n\n  export interface ErrorResponse {\n    status: number;\n    statusText: string;\n    data: any;\n  }\n\n  export interface FutureConfig {\n    v7_fetcherPersist: boolean;\n    v7_normalizeFormMethod: boolean;\n    v7_partialHydration: boolean;\n    v7_prependBasename: boolean;\n    v7_relativeSplatPath: boolean;\n    v7_skipActionErrorRevalidation: boolean;\n  }\n\n  export interface GetScrollRestorationKeyFunction {\n    (location: Location, matches: AgnosticRouteMatch[]): string | null;\n  }\n\n  export class UNSAFE_ErrorResponseImpl implements ErrorResponse {\n    status: number;\n    statusText: string;\n    data: any;\n    error?: Error;\n    internal: boolean;\n\n    constructor(\n      status: number,\n      statusText?: string,\n      data?: any,\n      internal?: boolean\n    );\n  }\n\n  export interface UIMatch<Data = unknown, Handle = unknown> {\n    id: string;\n    pathname: string;\n    params: Params;\n    data: Data;\n    handle: Handle;\n  }\n\n  export interface TrackedPromise extends Promise<any> {\n    _tracked?: boolean;\n    _data?: any;\n    _error?: any;\n  }\n\n  export interface DeferredData {\n    data: Record<string, unknown>;\n    subscribe(fn: (aborted: boolean, settledKey?: string) => void): () => void;\n    cancel(): void;\n    resolveData(signal: AbortSignal): Promise<boolean>;\n  }\n\n  export type RouterSubscriber = (state: RouterState) => void;\n\n  export interface RouterNavigateOptions extends NavigateOptions {\n    fromRouteId?: string;\n  }\n\n  export interface RouterFetchOptions {\n    formMethod?: FormMethod;\n    formAction?: string;\n    formEncType?: FormEncType;\n    formData?: FormData;\n    body?: any;\n  }\n\n  export interface StaticHandlerContext {\n    basename: string;\n    location: Partial<Location> | string;\n    matches: StaticHandlerMatch[];\n    loaderData: RouteData;\n    actionData: RouteData | null;\n    errors: RouteData | null;\n    statusCode: number;\n    loaderHeaders: Record<string, Headers>;\n    actionHeaders: Record<string, Headers>;\n    activeDeferreds: Record<string, DeferredData> | null;\n    _deepestRenderedBoundaryId?: string | null;\n  }\n\n  export interface StaticHandlerMatch extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n    route: AgnosticDataRouteObject;\n  }\n\n  // Export utilities\n  export function createPath(partialPath: Partial<Path>): string;\n  export function parsePath(path: string): Path;\n  export function resolvePath(to: To, fromPathname?: string): Path;\n  export function generatePath<ParamKey extends string = string>(\n    originalPath: string,\n    params: { [key in ParamKey]: string | number } = {} as any\n  ): string;\n  export function matchPath<\n    ParamKey extends string = string,\n    Path extends string = string\n  >(\n    pattern: PathPattern<Path> | Path,\n    pathname: string\n  ): PathMatch<ParamKey> | null;\n\n  export interface PathPattern<Path extends string = string> {\n    path: Path;\n    caseSensitive?: false;\n    end?: boolean;\n  }\n\n  export interface PathMatch<ParamKey extends string = string> {\n    params: Params<ParamKey>;\n    pathname: string;\n    pathnameBase: string;\n    pattern: PathPattern;\n  }\n\n  export function matchRoutes(\n    routes: AgnosticRouteObject[],\n    location: Partial<Location> | string,\n    basename?: string\n  ): AgnosticRouteMatch[] | null;\n\n  export function redirect(url: string, init?: number | ResponseInit): Response;\n  export function redirectDocument(url: string, init?: number | ResponseInit): Response;\n  export function replace(url: string, init?: number | ResponseInit): Response;\n  export function json(data: any, init?: number | ResponseInit): Response;\n  export function defer(data: Record<string, unknown>, init?: number | ResponseInit): Response;\n  export function isRouteErrorResponse(error: any): error is ErrorResponse;\n\n  // AbortedDeferredError class\n  export class AbortedDeferredError extends Error {\n    constructor(message?: string);\n  }\n}\n\n// Fix react-router exports that depend on @remix-run/router\ndeclare module 'react-router' {\n  import type {\n    ActionFunction,\n    ActionFunctionArgs,\n    LoaderFunction,\n    LoaderFunctionArgs,\n    Router,\n    Location,\n    NavigateOptions,\n    RelativeRoutingType,\n    Params,\n    Path,\n    PathMatch,\n    PathPattern,\n    To,\n    Fetcher,\n    Blocker,\n    BlockerFunction,\n    Navigation,\n    UIMatch,\n    HydrationState,\n    ErrorResponse,\n    FutureConfig,\n    AgnosticRouteObject,\n    AgnosticIndexRouteObject,\n    AgnosticNonIndexRouteObject,\n    ShouldRevalidateFunction,\n    ShouldRevalidateFunctionArgs,\n    TrackedPromise,\n    Action,\n    UNSAFE_ErrorResponseImpl,\n    AbortedDeferredError\n  } from '@remix-run/router';\n\n  // Re-export everything that react-router-dom needs\n  export type {\n    ActionFunction,\n    ActionFunctionArgs,\n    LoaderFunction,\n    LoaderFunctionArgs,\n    Location,\n    NavigateOptions,\n    RelativeRoutingType,\n    Params,\n    Path,\n    PathMatch,\n    PathPattern,\n    To,\n    Fetcher,\n    Blocker,\n    BlockerFunction,\n    Navigation,\n    UIMatch,\n    HydrationState,\n    ErrorResponse,\n    FutureConfig,\n    ShouldRevalidateFunction,\n    ShouldRevalidateFunctionArgs,\n    Action as NavigationType,\n    UNSAFE_ErrorResponseImpl,\n    AbortedDeferredError\n  };\n\n  // Route objects with exactOptionalPropertyTypes fixes\n  export interface RouteObject {\n    caseSensitive?: false;\n    children?: RouteObject[];\n    element?: React.ReactNode | null;\n    errorElement?: React.ReactNode | null;\n    index?: boolean;\n    path?: string;\n    loader?: LoaderFunction;\n    action?: ActionFunction;\n    id?: string;\n    shouldRevalidate?: ShouldRevalidateFunction;\n    handle?: any;\n    Component?: React.ComponentType<any> | null;\n    lazy?: LazyRouteFunction<RouteObject>;\n    ErrorBoundary?: React.ComponentType<any> | null;\n    HydrateFallback?: React.ComponentType<any> | null;\n  }\n\n  export interface IndexRouteObject {\n    caseSensitive?: false;\n    children?: never;\n    element?: React.ReactNode | null;\n    errorElement?: React.ReactNode | null;\n    index: true;\n    path?: never;\n    loader?: LoaderFunction;\n    action?: ActionFunction;\n    id?: string;\n    shouldRevalidate?: ShouldRevalidateFunction;\n    handle?: any;\n    Component?: React.ComponentType<any> | null;\n    lazy?: LazyRouteFunction<RouteObject>;\n    ErrorBoundary?: React.ComponentType<any> | null;\n    HydrateFallback?: React.ComponentType<any> | null;\n  }\n\n  export interface NonIndexRouteObject {\n    caseSensitive?: false;\n    children?: RouteObject[];\n    element?: React.ReactNode | null;\n    errorElement?: React.ReactNode | null;\n    index?: false;\n    path?: string;\n    loader?: LoaderFunction;\n    action?: ActionFunction;\n    id?: string;\n    shouldRevalidate?: ShouldRevalidateFunction;\n    handle?: any;\n    Component?: React.ComponentType<any> | null;\n    lazy?: LazyRouteFunction<RouteObject>;\n    ErrorBoundary?: React.ComponentType<any> | null;\n    HydrateFallback?: React.ComponentType<any> | null;\n  }\n\n  export interface LazyRouteFunction<R extends RouteObject> {\n    (): Promise<LazyRouteModule<R>>;\n  }\n\n  export interface LazyRouteModule<R extends RouteObject> {\n    Component?: R['Component'];\n    ErrorBoundary?: R['ErrorBoundary'];\n    HydrateFallback?: R['HydrateFallback'];\n    element?: R['element'];\n    errorElement?: R['errorElement'];\n    loader?: R['loader'];\n    action?: R['action'];\n    shouldRevalidate?: R['shouldRevalidate'];\n    handle?: R['handle'];\n  }\n\n  // Data route types\n  export interface DataRouteMatch extends AgnosticDataRouteMatch {\n    route: DataRouteObject;\n  }\n\n  export interface DataRouteObject extends RouteObject {\n    children?: DataRouteObject[];\n    id: string;\n  }\n\n  // Component prop types\n  export interface MemoryRouterProps {\n    basename?: string;\n    children?: React.ReactNode;\n    initialEntries?: InitialEntry[];\n    initialIndex?: number;\n    future?: Partial<FutureConfig>;\n  }\n\n  export type InitialEntry = string | Partial<Location>;\n\n  export interface NavigateProps {\n    to: To;\n    replace?: boolean;\n    state?: any;\n    relative?: RelativeRoutingType;\n  }\n\n  export interface OutletProps {\n    context?: unknown;\n  }\n\n  export interface IndexRouteProps {\n    caseSensitive?: false;\n    path?: never;\n    element?: React.ReactNode | null;\n    errorElement?: React.ReactNode | null;\n    index: true;\n    loader?: LoaderFunction;\n    action?: ActionFunction;\n    shouldRevalidate?: ShouldRevalidateFunction;\n    handle?: any;\n    id?: string;\n    Component?: React.ComponentType<any> | null;\n    lazy?: LazyRouteFunction<RouteObject>;\n    ErrorBoundary?: React.ComponentType<any> | null;\n    HydrateFallback?: React.ComponentType<any> | null;\n  }\n\n  export interface LayoutRouteProps extends PathRouteProps {\n    children?: React.ReactNode;\n  }\n\n  export interface PathRouteProps {\n    caseSensitive?: false;\n    path: string;\n    element?: React.ReactNode | null;\n    errorElement?: React.ReactNode | null;\n    index?: false;\n    loader?: LoaderFunction;\n    action?: ActionFunction;\n    shouldRevalidate?: ShouldRevalidateFunction;\n    handle?: any;\n    id?: string;\n    Component?: React.ComponentType<any> | null;\n    lazy?: LazyRouteFunction<RouteObject>;\n    ErrorBoundary?: React.ComponentType<any> | null;\n    HydrateFallback?: React.ComponentType<any> | null;\n  }\n\n  export interface RouteProps {\n    caseSensitive?: false;\n    children?: React.ReactNode;\n    element?: React.ReactNode | null;\n    errorElement?: React.ReactNode | null;\n    index?: boolean;\n    path?: string;\n  }\n\n  export interface RouterProps {\n    basename?: string;\n    children?: React.ReactNode;\n    location: Partial<Location> | string;\n    navigationType?: NavigationType;\n    navigator: Navigator;\n    static?: boolean;\n  }\n\n  export interface RoutesProps {\n    children?: React.ReactNode;\n    location?: Partial<Location> | string;\n  }\n\n  // Navigator interface\n  export interface Navigator {\n    createHref: History['createHref'];\n    go: History['go'];\n    push(to: To, state?: any): void;\n    replace(to: To, state?: any): void;\n  }\n\n  // Hook return types\n  export interface NavigateFunction {\n    (to: To, options?: NavigateOptions): void;\n    (delta: number): void;\n  }\n\n  // Context types\n  export interface RouterProviderProps {\n    fallbackElement?: React.ReactNode;\n    router: Router;\n    future?: Partial<FutureConfig>;\n  }\n\n  // Utility types\n  export type Hash = string;\n  export type Pathname = string;\n  export type Search = string;\n\n  export type ParamParseKey<Segment extends string> =\n    Segment extends `${infer LeftSegment}/${infer RightSegment}`\n      ? ParamParseKey<LeftSegment> | ParamParseKey<RightSegment>\n      : Segment extends `:${infer Param}`\n      ? Param extends `${infer OptionalParam}?`\n        ? OptionalParam\n        : Param\n      : Segment extends `*${infer RestParam}`\n      ? RestParam extends ''\n        ? '*'\n        : RestParam\n      : never;\n\n  export type PathParam<Path extends string> = Path extends `*${infer Rest}`\n    ? Rest extends ''\n      ? '*'\n      : Rest\n    : Path extends `:${infer Param}`\n    ? Param extends `${infer OptionalParam}?`\n      ? OptionalParam\n      : Param\n    : never;\n\n  // JSON helper\n  export interface JsonFunction {\n    <Data>(data: Data, init?: number | ResponseInit): Response;\n  }\n\n  export interface RedirectFunction {\n    (url: string, init?: number | ResponseInit): Response;\n  }\n\n  // Await component props\n  export interface AwaitProps<Resolve> {\n    children: React.ReactNode | ((value: Awaited<Resolve>) => React.ReactNode);\n    errorElement?: React.ReactNode;\n    resolve: Resolve;\n  }\n\n  // UNSAFE context exports (re-exported from react-router-dom)\n  export interface UNSAFE_DataRouterContext {\n    router: Router;\n  }\n\n  export interface UNSAFE_DataRouterStateContext {\n    router: Router;\n    static: boolean;\n  }\n\n  export interface UNSAFE_NavigationContext {\n    basename: string;\n    navigator: Navigator;\n    static: boolean;\n  }\n\n  export interface UNSAFE_LocationContext {\n    location: Location;\n    navigationType: NavigationType;\n  }\n\n  export interface UNSAFE_RouteContext {\n    outlet: React.ReactElement | null;\n    matches: RouteMatch[];\n    isDataRoute: boolean;\n  }\n\n  export interface RouteMatch<ParamKey extends string = string, RouteObjectType extends RouteObject = RouteObject> {\n    params: Params<ParamKey>;\n    pathname: string;\n    pathnameBase: string;\n    route: RouteObjectType;\n  }\n\n  // Component and hook declarations\n  export const Router: React.ComponentType<RouterProps>;\n  export const Routes: React.ComponentType<RoutesProps>;\n  export const Route: React.ComponentType<RouteProps>;\n  export const Navigate: React.ComponentType<NavigateProps>;\n  export const Outlet: React.ComponentType<OutletProps>;\n  export const MemoryRouter: React.ComponentType<MemoryRouterProps>;\n  export const Await: <T>(props: AwaitProps<T>) => React.ReactElement;\n\n  // Hook declarations\n  export function useHref(to: To, options?: { relative?: RelativeRoutingType }): string;\n  export function useInRouterContext(): boolean;\n  export function useLocation(): Location;\n  export function useNavigationType(): NavigationType;\n  export function useNavigate(): NavigateFunction;\n  export function useOutlet(context?: unknown): React.ReactElement | null;\n  export function useOutletContext<Context = unknown>(): Context;\n  export function useParams<ParamsOrKey extends string | Record<string, string | undefined> = string>(): Readonly<\n    [ParamsOrKey] extends [string] ? Params<ParamsOrKey> : Partial<ParamsOrKey>\n  >;\n  export function useResolvedPath(to: To, options?: { relative?: RelativeRoutingType }): Path;\n  export function useRoutes(routes: RouteObject[], locationArg?: Partial<Location> | string): React.ReactElement | null;\n  export function useMatch<ParamKey extends ParamParseKey<Path>, Path extends string>(\n    pattern: PathPattern<Path> | Path\n  ): PathMatch<ParamKey> | null;\n  export function useMatches(): UIMatch[];\n  export function useNavigation(): Navigation;\n  export function useRevalidator(): {\n    revalidate: () => Promise<void>;\n    state: \"idle\" | \"loading\";\n  };\n  export function useLoaderData<T = any>(): T;\n  export function useRouteLoaderData<T = any>(routeId: string): T | undefined;\n  export function useActionData<T = any>(): T | undefined;\n  export function useRouteError(): unknown;\n  export function useAsyncValue(): unknown;\n  export function useAsyncError(): unknown;\n  export function useBlocker(shouldBlock: boolean | BlockerFunction): Blocker;\n\n  // Utility functions\n  export const createMemoryRouter: typeof import('@remix-run/router').createMemoryRouter;\n  export const createPath: typeof import('@remix-run/router').createPath;\n  export const createRoutesFromChildren: (children: React.ReactNode, parentPath?: number[]) => RouteObject[];\n  export const createRoutesFromElements: (children: React.ReactNode, parentPath?: number[]) => RouteObject[];\n  export const generatePath: typeof import('@remix-run/router').generatePath;\n  export const isRouteErrorResponse: typeof import('@remix-run/router').isRouteErrorResponse;\n  export const json: JsonFunction;\n  export const matchPath: typeof import('@remix-run/router').matchPath;\n  export const matchRoutes: typeof import('@remix-run/router').matchRoutes;\n  export const parsePath: typeof import('@remix-run/router').parsePath;\n  export const redirect: RedirectFunction;\n  export const redirectDocument: typeof import('@remix-run/router').redirectDocument;\n  export const replace: typeof import('@remix-run/router').replace;\n  export const renderMatches: (matches: RouteMatch[] | null, parentMatches?: RouteMatch[]) => React.ReactElement | null;\n  export const resolvePath: typeof import('@remix-run/router').resolvePath;\n  export const defer: typeof import('@remix-run/router').defer;\n\n  // UNSAFE exports\n  export const UNSAFE_DataRouterContext: React.Context<UNSAFE_DataRouterContext | null>;\n  export const UNSAFE_DataRouterStateContext: React.Context<UNSAFE_DataRouterStateContext | null>;\n  export const UNSAFE_NavigationContext: React.Context<UNSAFE_NavigationContext>;\n  export const UNSAFE_LocationContext: React.Context<UNSAFE_LocationContext>;\n  export const UNSAFE_RouteContext: React.Context<UNSAFE_RouteContext>;\n  export function UNSAFE_useRouteId(): string | undefined;\n\n  // Error class re-exports\n  export { AbortedDeferredError } from '@remix-run/router';\n  export { UNSAFE_ErrorResponseImpl } from '@remix-run/router';\n}","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\react-router-dom.d.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[493,496],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[493,496],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1287,1290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1287,1290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1297,1300],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1297,1300],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1325,1328],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1325,1328],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1335,1338],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1335,1338],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1403,1406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1403,1406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1413,1416],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1413,1416],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1431,1434],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1431,1434],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":57,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":57,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1461,1464],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1461,1464],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1564,1567],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1564,1567],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":71,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":71,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1835,1838],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1835,1838],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":77,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":77,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1941,1944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1941,1944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Type augmentation pour react-router-dom v7.7.0\ndeclare module 'react-router-dom' {\n  export * from 'react-router-dom/dist/index';\n  \n  // R├®export des types principaux pour garantir la compatibilit├®\n  import type { ComponentType, ReactNode } from 'react';\n  \n  // Navigation et routing\n  export interface NavigateFunction {\n    (to: string | number, options?: NavigateOptions): void;\n    (delta: number): void;\n  }\n  \n  export interface NavigateOptions {\n    replace?: boolean;\n    state?: any;\n    relative?: 'route' | 'path';\n    preventScrollReset?: boolean;\n    unstable_flushSync?: boolean;\n  }\n  \n  export interface Location {\n    pathname: string;\n    search: string;\n    hash: string;\n    state: unknown;\n    key: string;\n  }\n  \n  // Hooks\n  export function useNavigate(): NavigateFunction;\n  export function useLocation(): Location;\n  \n  // Components\n  export const BrowserRouter: ComponentType<{\n    basename?: string;\n    children?: ReactNode;\n    window?: Window;\n  }>;\n  \n  export const Routes: ComponentType<{\n    children?: ReactNode;\n    location?: Partial<Location> | string;\n  }>;\n  \n  export const Route: ComponentType<{\n    path?: string;\n    element?: ReactNode;\n    children?: ReactNode;\n    index?: boolean;\n    caseSensitive?: boolean;\n    loader?: (...args: any[]) => any;\n    action?: (...args: any[]) => any;\n    errorElement?: ReactNode;\n    shouldRevalidate?: (...args: any[]) => any;\n    handle?: any;\n    lazy?: () => Promise<any>;\n  }>;\n  \n  export const Link: ComponentType<{\n    to: string;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: 'route' | 'path';\n    unstable_viewTransition?: boolean;\n    children?: ReactNode;\n    className?: string;\n    style?: React.CSSProperties;\n    onClick?: React.MouseEventHandler<HTMLAnchorElement>;\n    [key: string]: any;\n  }>;\n  \n  export const Navigate: ComponentType<{\n    to: string;\n    replace?: boolean;\n    state?: any;\n    relative?: 'route' | 'path';\n  }>;\n  \n  export const Outlet: ComponentType<{\n    context?: unknown;\n  }>;\n}","usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\react-router-fixes.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\react-router.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\rpc.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\solana.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\strict-optional.types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\tailwind.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\user.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\userProgressRow.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\userSettings.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\userSettingsSchemas.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\userTableRow.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\types\\vite-env-fixes.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\utils\\auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\utils\\supabaseClient.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\utils\\theme.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]},{"filePath":"C:\\GitHub\\ai_foundations_lms\\apps\\frontend\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"no-return-await","replacedBy":[],"info":{"message":"The original assumption of the rule no longer holds true because of engine optimization.","deprecatedSince":"8.46.0","availableUntil":null,"replacedBy":[]}}]}]
