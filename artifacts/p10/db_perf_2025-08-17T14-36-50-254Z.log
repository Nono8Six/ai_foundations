{
  "description": "Performance benchmarks",
  "exitCode": 3,
  "timestamp": "2025-08-17T14:36:50.254Z",
  "stdout": "BEGIN\r\nCREATE EXTENSION\r\nSET\r\nSET\r\n📊 P10: Starting performance benchmarks...\r\nCREATE TABLE\r\nCREATE FUNCTION\r\n🚀 Running micro-benchmarks...\r\nBenchmarking credit_xp (Target: p95 < 50ms)...\r\nDO\r\nBenchmarking get_active_xp_sources (Target: p95 < 10ms)...\r\nDO\r\nBenchmarking compute_level_info (Target: p95 < 2ms)...\r\nDO\r\n🔥 Running load test (1000 events/minute simulation)...\r\nCREATE FUNCTION\r\nDO\r\n🗄️  Testing cache performance...\r\n",
  "stderr": "psql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:3: NOTICE:  extension \"pgcrypto\" already exists, skipping\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:146: NOTICE:  Running 50 iterations of credit_xp...\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:146: NOTICE:  📊 credit_xp Performance:\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:146: NOTICE:     P50: 0.516 ms, P95: 1.244 ms, P99: 1.528 ms\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:146: NOTICE:     Avg: 0.607 ms, Min: 0.458 ms, Max: 1.772 ms\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:146: NOTICE:     Success Rate: %100.00000000000000000000\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:146: NOTICE:  ✅ SLA MET: credit_xp p95 within target\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:168: NOTICE:  Running 100 iterations of get_active_xp_sources...\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:168: NOTICE:  📊 get_active_xp_sources Performance:\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:168: NOTICE:     P50: 0.111 ms, P95: 0.150 ms, P99: 0.670 ms\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:168: NOTICE:     Avg: 0.128 ms, Min: 0.104 ms, Max: 0.892 ms\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:168: NOTICE:     Success Rate: %0.00000000000000000000\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:168: NOTICE:  ✅ SLA MET: get_active_xp_sources p95 within target\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:190: NOTICE:  Running 200 iterations of compute_level_info...\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:190: NOTICE:  📊 compute_level_info Performance:\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:190: NOTICE:     P50: 0.169 ms, P95: 0.191 ms, P99: 0.215 ms\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:190: NOTICE:     Avg: 0.174 ms, Min: 0.162 ms, Max: 0.526 ms\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:190: NOTICE:     Success Rate: %0.00000000000000000000\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:190: NOTICE:  ✅ SLA MET: compute_level_info p95 within target\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:317: NOTICE:  Simulating 100 events for user 00000000-0000-0000-0000-000000000001 over 1 minute(s)...\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:317: NOTICE:  Minute 1: 100 events, 0.86339000000000000000.3f ms avg, 2.357.3f ms max, 0 errors\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:317: NOTICE:  📊 Load Test Summary:\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:317: NOTICE:     Total Events: 100, Total Errors: 0, Error Rate: 0.00000000000000000000.2f%\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:317: NOTICE:     Max Average Time: 0.863.3f ms\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:317: NOTICE:  ✅ Load test error rate acceptable\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:365: ERROR:  invalid input syntax for type json\r\nDETAIL:  Token \"(\" is invalid.\r\nCONTEXT:  JSON data, line 1: (...\r\nPL/pgSQL function inline_code_block line 15 at SQL statement\r\npsql:C:/GitHub/ai_foundations_lms/scripts/p10/db_perf.sql:365: STATEMENT:  DO $$\r\nDECLARE\r\n  cold_start TIMESTAMP WITH TIME ZONE;\r\n  cold_end TIMESTAMP WITH TIME ZONE;\r\n  warm_start TIMESTAMP WITH TIME ZONE;\r\n  warm_end TIMESTAMP WITH TIME ZONE;\r\n  cold_time_ms DECIMAL(10,3);\r\n  warm_time_ms DECIMAL(10,3);\r\n  result JSONB;\r\n  i INTEGER;\r\n  total_warm_time DECIMAL(10,3) := 0;\r\nBEGIN\r\n  -- Cold cache (first call)\r\n  cold_start := clock_timestamp();\r\n  SELECT get_active_xp_sources() INTO result;\r\n  cold_end := clock_timestamp();\r\n  cold_time_ms := EXTRACT(EPOCH FROM (cold_end - cold_start)) * 1000;\r\n  \r\n  -- Warm cache (subsequent calls)\r\n  FOR i IN 1..10 LOOP\r\n    warm_start := clock_timestamp();\r\n    SELECT get_active_xp_sources() INTO result;\r\n    warm_end := clock_timestamp();\r\n    warm_time_ms := EXTRACT(EPOCH FROM (warm_end - warm_start)) * 1000;\r\n    total_warm_time := total_warm_time + warm_time_ms;\r\n  END LOOP;\r\n  \r\n  warm_time_ms := total_warm_time / 10;\r\n  \r\n  RAISE NOTICE '📊 Cache Performance:';\r\n  RAISE NOTICE '   Cold cache: %.3f ms', cold_time_ms;\r\n  RAISE NOTICE '   Warm cache (avg): %.3f ms', warm_time_ms;\r\n  RAISE NOTICE '   Cache speedup: %.1fx', cold_time_ms / warm_time_ms;\r\n  \r\n  IF warm_time_ms > 10.0 THEN\r\n    RAISE WARNING '⚠️  Warm cache performance above target (%.3f ms > 10ms)', warm_time_ms;\r\n  ELSE\r\n    RAISE NOTICE '✅ Cache performance within target';\r\n  END IF;\r\nEND $$;\r\n"
}