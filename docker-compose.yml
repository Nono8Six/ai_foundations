version: '3.8'

networks:
  app-network:
    driver: bridge

volumes:
  # pnpm_store_volume: # Utilisé par les Dockerfiles pour le cache de build, pas directement ici
  # node_modules_frontend_volume: # Les node_modules sont dans l'image de dev ou bind-mountés
  # node_modules_backend_volume:  # Idem
  portainer_data: {} # Pour la persistance des données Portainer si utilisé
  pnpm-store:
  node-modules:

services:
  # ===========================================
  # FRONTEND - React/Vite
  # ===========================================
  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile.front
    command: pnpm --filter apps/frontend dev --host 0.0.0.0
    env_file:
      - .env
    environment:
      - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
    ports:
      - "5173:5173"
    volumes:
      - ./apps/frontend:/app/apps/frontend
      - pnpm-store:/root/.local/share/pnpm/store
      - node-modules:/app/apps/frontend/node_modules
    networks:
      - app-network
    restart: unless-stopped

  # ===========================================
  # BACKEND - Node.js API (Optionnel)
  # ===========================================
  backend-api: # Renommé pour clarté
    # Conditionner la construction et le lancement de ce service
    # Cela nécessite une vérification manuelle ou un script externe, car `build.if` n'existe pas.
    # On utilise un profil Docker Compose pour le rendre optionnel.
    profiles: ["api"]
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
      target: development-backend # Cible l'étape de développement du Dockerfile backend
      # args: # Si des args de build sont nécessaires
      #   NODE_ENV: development
    container_name: ai-foundations-backend-api
    volumes:
      - ./apps/backend:/app/apps/backend
      - ./packages:/app/packages # Si partagé
    ports:
      - "3001:3001" # Si le backend écoute sur le port 3001
    environment:
      - NODE_ENV=development
      - PORT=3001
      # Variables nécessaires pour le backend API, chargées depuis .env
      - SUPABASE_URL=${SUPABASE_URL} # Si l'API backend doit appeler Supabase
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY} # Attention à la sécurité ici
      # Autres variables d'environnement pour l'API backend
    # La commande est définie dans le Dockerfile backend (CMD ["pnpm", "dev"])
    networks:
      - app-network
    restart: unless-stopped
    # Le healthcheck est défini dans le Dockerfile de développement du backend

  # ===========================================
  # MONITORING (Optionnel - Portainer)
  # ===========================================
  portainer:
    profiles: ["monitoring"]
    image: portainer/portainer-ce:latest
    container_name: ai-foundations-portainer
    ports:
      - "9000:9000"
      - "8000:8000" # Pour le tunnel Edge si utilisé
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - app-network
    restart: unless-stopped

  supabase:
    profiles: ["supabase-local"]
    image: supabase/postgres
    ports:
      - "54322:5432"
    networks:
      - app-network
    restart: unless-stopped

# Note: Une instance Supabase locale peut être lancée via le service `supabase` (profil
# `supabase-local`) ou via la commande `pnpm db:start` de la CLI Supabase.
