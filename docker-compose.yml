version: '3.8'

networks:
  app-network:
    driver: bridge

volumes:
  # pnpm_store_volume: # Utilisé par les Dockerfiles pour le cache de build, pas directement ici
  # node_modules_frontend_volume: # Les node_modules sont dans l'image de dev ou bind-mountés
  # node_modules_backend_volume:  # Idem
  portainer_data: {} # Pour la persistance des données Portainer si utilisé

services:
  # ===========================================
  # FRONTEND - React/Vite
  # ===========================================
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development # Cible l'étape de développement du Dockerfile racine
    container_name: ai-foundations-frontend
    # Le working_dir est défini dans le Dockerfile (USER node, WORKDIR /app/apps/frontend)
    # WORKDIR /app/apps/frontend # Non nécessaire si bien défini dans le Dockerfile
    volumes:
      # Montage du code source pour le hot-reloading
      # Assurez-vous que les chemins correspondent à la structure de votre projet
      - ./apps/frontend:/app/apps/frontend
      - ./packages:/app/packages # Si vous avez des packages locaux partagés
      # Les node_modules sont dans l'image de dev, mais on peut les masquer pour utiliser ceux du host si besoin (non recommandé généralement)
      # Ou utiliser un volume pour persister les node_modules entre les `down` et `up` si non inclus dans l'image de dev.
      # Pour l'instant, on se fie à ceux de l'image `development` qui les copie de `build-assets`.
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true # Souvent nécessaire pour le hot-reload dans Docker
      # Transmettre les variables d'environnement du fichier .env au conteneur
      - VITE_SUPABASE_URL=${VITE_SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${VITE_SUPABASE_ANON_KEY}
      - VITE_DEBUG=${VITE_DEBUG}
      - VITE_APP_NAME=${VITE_APP_NAME}
    # La commande est définie dans le Dockerfile (CMD ["pnpm", "dev", "--host", "0.0.0.0"])
    # command: pnpm --filter frontend dev # Redondant si CMD dans Dockerfile est correct
    networks:
      - app-network
    restart: unless-stopped
    # Le healthcheck est défini dans le Dockerfile de développement

  # ===========================================
  # BACKEND - Node.js API (Optionnel)
  # ===========================================
  backend-api: # Renommé pour clarté
    # Conditionner la construction et le lancement de ce service
    # Cela nécessite une vérification manuelle ou un script externe, car `build.if` n'existe pas.
    # On utilise un profil Docker Compose pour le rendre optionnel.
    profiles: ["api"]
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
      target: development-backend # Cible l'étape de développement du Dockerfile backend
      # args: # Si des args de build sont nécessaires
      #   NODE_ENV: development
    container_name: ai-foundations-backend-api
    volumes:
      - ./apps/backend:/app/apps/backend
      - ./packages:/app/packages # Si partagé
    ports:
      - "3001:3001" # Si le backend écoute sur le port 3001
    environment:
      - NODE_ENV=development
      - PORT=3001
      # Variables nécessaires pour le backend API, chargées depuis .env
      - SUPABASE_URL=${SUPABASE_URL} # Si l'API backend doit appeler Supabase
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY} # Attention à la sécurité ici
      # Autres variables d'environnement pour l'API backend
    # La commande est définie dans le Dockerfile backend (CMD ["pnpm", "dev"])
    networks:
      - app-network
    restart: unless-stopped
    # Le healthcheck est défini dans le Dockerfile de développement du backend

  # ===========================================
  # MONITORING (Optionnel - Portainer)
  # ===========================================
  portainer:
    profiles: ["monitoring"]
    image: portainer/portainer-ce:latest
    container_name: ai-foundations-portainer
    ports:
      - "9000:9000"
      - "8000:8000" # Pour le tunnel Edge si utilisé
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    networks:
      - app-network
    restart: unless-stopped

# Note: L'environnement Supabase local (Postgres, Studio, etc.) est géré par `pnpm db:start`
# et n'est pas défini directement dans ce fichier docker-compose.yml pour éviter les conflits
# et simplifier la gestion, conformément à la stratégie "pnpm db:start manuel".
