# üèÜ Supabase x GitHub x Types ‚Äì Le Workflow MASTERCLASS

Ce guide est votre source de v√©rit√© pour garder votre projet `ai_foundations` parfaitement synchronis√© entre votre machine locale, votre d√©p√¥t GitHub et votre base de donn√©es Supabase en ligne. Suivez ces workflows pour √©viter les conflits et travailler de mani√®re professionnelle.

### üìñ Principes Fondamentaux (Les 3 R√®gles d'Or)

1.  **Le Code est Roi** : Les fichiers dans votre dossier `/supabase/migrations` sont la **seule source de v√©rit√©** pour la structure de votre base de donn√©es. La base de donn√©es en ligne (sur supabase.com) n'est qu'un reflet de ce code.
2.  **Les Types Suivent le Sch√©ma** : Le fichier `src/types/database.types.ts` doit **TOUJOURS** √™tre mis √† jour apr√®s la moindre modification du sch√©ma (une nouvelle table, une colonne, une `policy`...). C'est le pont entre votre base de donn√©es et votre code React.
3.  **Tout est Versionn√©** : Chaque modification de sch√©ma (un nouveau fichier de migration) et chaque mise √† jour des types **doit √™tre commit√©e sur Git**. Il ne doit jamais y avoir de changement "cach√©" sur le cloud ou oubli√© sur une machine.

---

### üõ†Ô∏è Les Commandes Essentielles √† Conna√Ætre

| Commande                                                                 | Quand l'utiliser ?                                                                |
| ------------------------------------------------------------------------ | --------------------------------------------------------------------------------- |
| `supabase start`                                                         | Pour d√©marrer l'environnement Supabase complet sur votre machine (via Docker).    |
| `supabase db reset`                                                      | Pour d√©truire et recr√©er votre base de donn√©es locale en appliquant **toutes** les migrations. Id√©al apr√®s un `git pull` ou pour tester une migration. |
| `supabase migration new <nom_descriptif>`                                | Pour cr√©er un nouveau fichier de migration SQL vide.                            |
| `supabase db push`                                                       | Pour appliquer les nouvelles migrations (celles qui ne sont pas d√©j√† sur le cloud) sur votre **vraie base de donn√©es Supabase en ligne**. |
| `supabase db pull`                                                       | Pour d√©tecter les changements faits sur le **tableau de bord en ligne** et cr√©er automatiquement un fichier de migration local correspondant. |
| `pnpm gen:types`                                                         | Votre script qui lance `supabase gen types typescript --local ...`. √Ä utiliser apr√®s tout changement de sch√©ma local. |

---

### ‚ö° Sc√©narios Concrets : Le Workflow Id√©al pour Chaque Situation

Voici le guide pas √† pas pour les cas de figure que vous allez rencontrer.

#### A. Le Cas Standard : D√©veloppement "Local-First"
* **Quand ?** Vous voulez ajouter une nouvelle table, une fonction, une RLS policy. C'est la m√©thode la plus s√ªre et la plus professionnelle.

1.  **D√©marrez l'environnement local** (si ce n'est pas d√©j√† fait) :
    ```sh
    supabase start
    ```
2.  **Cr√©ez un fichier de migration** avec un nom clair :
    ```sh
    supabase migration new add_bio_to_profiles
    ```
3.  **√âcrivez votre code SQL** dans le nouveau fichier cr√©√© dans `/supabase/migrations`.
4.  **Appliquez et testez** en r√©initialisant votre base locale. C'est le test ultime pour v√©rifier que votre migration fonctionne sur une base propre :
    ```sh
    supabase db reset
    ```
5.  **Mettez vos types √† jour** pour que TypeScript connaisse la nouvelle structure :
    ```sh
    pnpm gen:types
    ```
6.  **D√©ployez sur le cloud** quand vous √™tes s√ªr de vous :
    ```sh
    supabase db push
    ```
7.  **Commitez votre travail** :
    ```sh
    git add .
    git commit -m "feat(db): add bio column to profiles table"
    git push
    ```

---

#### B. Le Cas "Modification Rapide" : via le Tableau de Bord Supabase
* **Quand ?** Vous avez la flemme et vous ajoutez une colonne directement depuis l'interface web de supabase.com.

1.  Faites votre modification sur l'interface de Supabase.
2.  **IMM√âDIATEMENT APR√àS**, retournez sur votre terminal et synchronisez votre code local :
    ```sh
    supabase db pull
    ```
    *(Cette commande magique cr√©e le fichier de migration pour vous !)*
3.  Mettez √† jour les types pour refl√©ter ce changement :
    ```sh
    pnpm gen:types
    ```
4.  **Commitez imm√©diatement** pour garder votre historique Git propre :
    ```sh
    git add .
    git commit -m "chore(db): sync new column added via dashboard"
    git push
    ```

---

#### C. Le Cas "Codex" : Collaboration via une IA et GitHub
* **Quand ?** OpenAI Codex (ou un autre d√©veloppeur) a fait un `push` sur GitHub avec de nouveaux fichiers de migration, mais n'a **pas** lanc√© `supabase db push`. La base cloud n'est donc pas √† jour.

1.  **R√©cup√©rez les changements** depuis GitHub :
    ```sh
    git pull origin main
    ```
2.  **Appliquez les nouvelles migrations** sur votre base de donn√©es locale pour v√©rifier que tout fonctionne et que votre environnement est √† jour. C'est une √©tape de validation cruciale.
    ```sh
    supabase db reset
    ```
3.  **G√©n√©rez les types** pour que votre code React soit synchronis√© :
    ```sh
    pnpm gen:types
    ```
4.  **D√©ployez les migrations sur le cloud**. C'est votre r√¥le de finaliser le travail de l'IA/du collaborateur.
    ```sh
    supabase db push
    ```
5.  (Optionnel mais recommand√©) Commitez les types mis √† jour si `pnpm gen:types` a d√©tect√© des changements.
    ```sh
    git add src/types/database.types.ts
    git commit -m "chore: regenerate types after applying new migrations"
    git push
    ```

---

#### D. Le Cas "Classique" : Apr√®s un `git pull` d'un coll√®gue
* **Quand ?** Vous r√©cup√©rez du code et vous voyez que de nouveaux fichiers de migration sont arriv√©s.

1.  **Mettez votre environnement local √† jour** en r√©-appliquant TOUTES les migrations. C'est la seule fa√ßon d'√™tre certain que votre base locale refl√®te 100% du code.
    ```sh
    git pull
    supabase db reset
    ```
2.  **Mettez vos types √† jour** :
    ```sh
    pnpm gen:types
    ```

---

### ‚ùó Ce qu‚Äôil ne faut JAMAIS faire

* **Modifier la base cloud ET la base locale en m√™me temps sans synchroniser**. C'est la recette pour un d√©sastre et des conflits de migration.
* **Modifier un ancien fichier de migration**. Une fois qu'une migration est √©crite et partag√©e, consid√©rez-la comme immuable. Si vous devez annuler un changement, cr√©ez une *nouvelle* migration qui le fait.
* **Oublier de commiter le fichier `pnpm-lock.yaml` ou `database.types.ts`**. Ces fichiers sont aussi importants que votre code source pour la reproductibilit√©.
* **Laisser Codex ou un bot cr√©er et merger des migrations sans les v√©rifier et les `push` sur Supabase vous-m√™me**. L'IA propose, le d√©veloppeur dispose (et d√©ploie).

En suivant ce guide, Arnaud, vous devriez pouvoir g√©rer votre projet avec la rigueur d'un lead dev, m√™me en collaborant avec des IA. Bon codage !
